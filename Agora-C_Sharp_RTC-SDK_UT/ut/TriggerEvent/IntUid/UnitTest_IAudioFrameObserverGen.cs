#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using System;
using NUnit.Framework;
using uid_t = System.UInt32;
using System.Collections.Generic;
namespace Agora.Rtc.Ut.Event
{
    public partial class UnitTest_IAudioFrameObserver
    {
        [Test]
        public void Test_IAudioFrameObserver_OnPlaybackAudioFrameBeforeMixing_85ec0fc()
        {
            ApiParam.@event = AgoraApiType.IAUDIOFRAMEOBSERVER_ONPLAYBACKAUDIOFRAMEBEFOREMIXING_85ec0fc;

            jsonObj.Clear();

            string channelId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("channelId", channelId);

            uint uid = ParamsHelper.CreateParam<uint>();
            jsonObj.Add("uid", uid);

            AudioFrame audioFrame = ParamsHelper.CreateParam<AudioFrame>();
            jsonObj.Add("audioFrame", audioFrame);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlaybackAudioFrameBeforeMixingPassed(channelId, uid, audioFrame));
        }

        [Test]
        public void Test_IAudioFrameObserver_OnRecordAudioFrame_4c8de15()
        {
            ApiParam.@event = AgoraApiType.IAUDIOFRAMEOBSERVER_ONRECORDAUDIOFRAME_4c8de15;

            jsonObj.Clear();

            string channelId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("channelId", channelId);

            AudioFrame audioFrame = ParamsHelper.CreateParam<AudioFrame>();
            jsonObj.Add("audioFrame", audioFrame);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnRecordAudioFramePassed(channelId, audioFrame));
        }

        [Test]
        public void Test_IAudioFrameObserver_OnPlaybackAudioFrame_4c8de15()
        {
            ApiParam.@event = AgoraApiType.IAUDIOFRAMEOBSERVER_ONPLAYBACKAUDIOFRAME_4c8de15;

            jsonObj.Clear();

            string channelId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("channelId", channelId);

            AudioFrame audioFrame = ParamsHelper.CreateParam<AudioFrame>();
            jsonObj.Add("audioFrame", audioFrame);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlaybackAudioFramePassed(channelId, audioFrame));
        }

        [Test]
        public void Test_IAudioFrameObserver_OnMixedAudioFrame_4c8de15()
        {
            ApiParam.@event = AgoraApiType.IAUDIOFRAMEOBSERVER_ONMIXEDAUDIOFRAME_4c8de15;

            jsonObj.Clear();

            string channelId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("channelId", channelId);

            AudioFrame audioFrame = ParamsHelper.CreateParam<AudioFrame>();
            jsonObj.Add("audioFrame", audioFrame);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnMixedAudioFramePassed(channelId, audioFrame));
        }

        [Test]
        public void Test_IAudioFrameObserver_OnEarMonitoringAudioFrame_5405a47()
        {
            ApiParam.@event = AgoraApiType.IAUDIOFRAMEOBSERVER_ONEARMONITORINGAUDIOFRAME_5405a47;

            jsonObj.Clear();

            AudioFrame audioFrame = ParamsHelper.CreateParam<AudioFrame>();
            jsonObj.Add("audioFrame", audioFrame);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnEarMonitoringAudioFramePassed(audioFrame));
        }

        [Test]
        public void Test_IAudioFrameObserver_OnPlaybackAudioFrameBeforeMixing_9215cc7()
        {
            ApiParam.@event = AgoraApiType.IAUDIOFRAMEOBSERVER_ONPLAYBACKAUDIOFRAMEBEFOREMIXING_9215cc7;

            jsonObj.Clear();

            string channelId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("channelId", channelId);

            string userId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("userId", userId);

            AudioFrame audioFrame = ParamsHelper.CreateParam<AudioFrame>();
            jsonObj.Add("audioFrame", audioFrame);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlaybackAudioFrameBeforeMixingPassed(channelId, userId, audioFrame));
        }

    }
}