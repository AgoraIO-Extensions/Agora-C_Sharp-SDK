#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using System;
using NUnit.Framework;
using uid_t = System.UInt32;
using System.Collections.Generic;
namespace Agora.Rtc.Ut.Event
{
    public partial class UnitTest_IMusicContentCenterEventHandler
    {
        [Test]
        public void Test_IMusicContentCenterEventHandler_OnMusicChartsResult_fb18135()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONMUSICCHARTSRESULT_fb18135;

            jsonObj.Clear();

            string requestId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("requestId", requestId);

            MusicChartInfo[] result = ParamsHelper.CreateParam<MusicChartInfo[]>();
            jsonObj.Add("result", result);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnMusicChartsResultPassed(requestId, result, reason));
        }

        [Test]
        public void Test_IMusicContentCenterEventHandler_OnMusicCollectionResult_c30c2e6()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONMUSICCOLLECTIONRESULT_c30c2e6;

            jsonObj.Clear();

            string requestId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("requestId", requestId);

            MusicCollection result = ParamsHelper.CreateParam<MusicCollection>();
            jsonObj.Add("result", result);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnMusicCollectionResultPassed(requestId, result, reason));
        }

        [Test]
        public void Test_IMusicContentCenterEventHandler_OnLyricResult_9ad9c90()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONLYRICRESULT_9ad9c90;

            jsonObj.Clear();

            string requestId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("requestId", requestId);

            long internalSongCode = ParamsHelper.CreateParam<long>();
            jsonObj.Add("internalSongCode", internalSongCode);

            string payload = ParamsHelper.CreateParam<string>();
            jsonObj.Add("payload", payload);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnLyricResultPassed(requestId, internalSongCode, payload, reason));
        }

        [Test]
        public void Test_IMusicContentCenterEventHandler_OnLyricInfoResult_4725ebf()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONLYRICINFORESULT_4725ebf;

            jsonObj.Clear();

            string requestId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("requestId", requestId);

            long songCode = ParamsHelper.CreateParam<long>();
            jsonObj.Add("songCode", songCode);

            ILyricInfo lyricInfo = ParamsHelper.CreateParam<ILyricInfo>();
            jsonObj.Add("lyricInfo", lyricInfo);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnLyricInfoResultPassed(requestId, songCode, lyricInfo, reason));
        }

        [Test]
        public void Test_IMusicContentCenterEventHandler_OnSongSimpleInfoResult_9ad9c90()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONSONGSIMPLEINFORESULT_9ad9c90;

            jsonObj.Clear();

            string requestId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("requestId", requestId);

            long songCode = ParamsHelper.CreateParam<long>();
            jsonObj.Add("songCode", songCode);

            string simpleInfo = ParamsHelper.CreateParam<string>();
            jsonObj.Add("simpleInfo", simpleInfo);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnSongSimpleInfoResultPassed(requestId, songCode, simpleInfo, reason));
        }

        [Test]
        public void Test_IMusicContentCenterEventHandler_OnPreLoadEvent_d238b4d()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONPRELOADEVENT_d238b4d;

            jsonObj.Clear();

            string requestId = ParamsHelper.CreateParam<string>();
            jsonObj.Add("requestId", requestId);

            long internalSongCode = ParamsHelper.CreateParam<long>();
            jsonObj.Add("internalSongCode", internalSongCode);

            int percent = ParamsHelper.CreateParam<int>();
            jsonObj.Add("percent", percent);

            string payload = ParamsHelper.CreateParam<string>();
            jsonObj.Add("payload", payload);

            MusicContentCenterState status = ParamsHelper.CreateParam<MusicContentCenterState>();
            jsonObj.Add("status", status);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPreLoadEventPassed(requestId, internalSongCode, percent, payload, status, reason));
        }

        [Test]
        public void Test_IMusicContentCenterEventHandler_OnStartScoreResult_c579a23()
        {
            ApiParam.@event = AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONSTARTSCORERESULT_c579a23;

            jsonObj.Clear();

            long internalSongCode = ParamsHelper.CreateParam<long>();
            jsonObj.Add("internalSongCode", internalSongCode);

            MusicContentCenterState status = ParamsHelper.CreateParam<MusicContentCenterState>();
            jsonObj.Add("status", status);

            MusicContentCenterStateReason reason = ParamsHelper.CreateParam<MusicContentCenterStateReason>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnStartScoreResultPassed(internalSongCode, status, reason));
        }

    }
}