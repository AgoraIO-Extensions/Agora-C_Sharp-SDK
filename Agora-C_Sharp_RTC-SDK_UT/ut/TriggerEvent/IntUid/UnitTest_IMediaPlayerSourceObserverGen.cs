#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using System;
using NUnit.Framework;
using uid_t = System.UInt32;
using System.Collections.Generic;
namespace Agora.Rtc.Ut.Event
{
    public partial class UnitTest_IMediaPlayerSourceObserver
    {
        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayerSourceStateChanged_7fb38f1()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYERSOURCESTATECHANGED_7fb38f1;

            jsonObj.Clear();

            MEDIA_PLAYER_STATE state = ParamsHelper.CreateParam<MEDIA_PLAYER_STATE>();
            jsonObj.Add("state", state);

            MEDIA_PLAYER_REASON reason = ParamsHelper.CreateParam<MEDIA_PLAYER_REASON>();
            jsonObj.Add("reason", reason);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayerSourceStateChangedPassed(state, reason));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPositionChanged_303b92e()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPOSITIONCHANGED_303b92e;

            jsonObj.Clear();

            long positionMs = ParamsHelper.CreateParam<long>();
            jsonObj.Add("positionMs", positionMs);

            long timestampMs = ParamsHelper.CreateParam<long>();
            jsonObj.Add("timestampMs", timestampMs);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPositionChangedPassed(positionMs, timestampMs));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayerEvent_50f16fa()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYEREVENT_50f16fa;

            jsonObj.Clear();

            MEDIA_PLAYER_EVENT eventCode = ParamsHelper.CreateParam<MEDIA_PLAYER_EVENT>();
            jsonObj.Add("eventCode", eventCode);

            long elapsedTime = ParamsHelper.CreateParam<long>();
            jsonObj.Add("elapsedTime", elapsedTime);

            string message = ParamsHelper.CreateParam<string>();
            jsonObj.Add("message", message);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayerEventPassed(eventCode, elapsedTime, message));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayBufferUpdated_f631116()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYBUFFERUPDATED_f631116;

            jsonObj.Clear();

            long playCachedBuffer = ParamsHelper.CreateParam<long>();
            jsonObj.Add("playCachedBuffer", playCachedBuffer);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayBufferUpdatedPassed(playCachedBuffer));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPreloadEvent_a1e3596()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPRELOADEVENT_a1e3596;

            jsonObj.Clear();

            string src = ParamsHelper.CreateParam<string>();
            jsonObj.Add("src", src);

            PLAYER_PRELOAD_EVENT @event = ParamsHelper.CreateParam<PLAYER_PRELOAD_EVENT>();
            jsonObj.Add("event", @event);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPreloadEventPassed(src, @event));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnCompleted()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONCOMPLETED;

            jsonObj.Clear();

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnCompletedPassed());
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnAgoraCDNTokenWillExpire()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONAGORACDNTOKENWILLEXPIRE;

            jsonObj.Clear();

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnAgoraCDNTokenWillExpirePassed());
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayerSrcInfoChanged_54f3e5a()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYERSRCINFOCHANGED_54f3e5a;

            jsonObj.Clear();

            SrcInfo from = ParamsHelper.CreateParam<SrcInfo>();
            jsonObj.Add("from", from);

            SrcInfo to = ParamsHelper.CreateParam<SrcInfo>();
            jsonObj.Add("to", to);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayerSrcInfoChangedPassed(from, to));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayerInfoUpdated_0e902a8()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYERINFOUPDATED_0e902a8;

            jsonObj.Clear();

            PlayerUpdatedInfo info = ParamsHelper.CreateParam<PlayerUpdatedInfo>();
            jsonObj.Add("info", info);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayerInfoUpdatedPassed(info));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayerCacheStats_0145940()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYERCACHESTATS_0145940;

            jsonObj.Clear();

            CacheStatistics stats = ParamsHelper.CreateParam<CacheStatistics>();
            jsonObj.Add("stats", stats);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayerCacheStatsPassed(stats));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnPlayerPlaybackStats_ffa466f()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONPLAYERPLAYBACKSTATS_ffa466f;

            jsonObj.Clear();

            PlayerPlaybackStats stats = ParamsHelper.CreateParam<PlayerPlaybackStats>();
            jsonObj.Add("stats", stats);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnPlayerPlaybackStatsPassed(stats));
        }

        [Test]
        public void Test_IMediaPlayerSourceObserver_OnAudioVolumeIndication_46f8ab7()
        {
            ApiParam.@event = AgoraApiType.IMEDIAPLAYERSOURCEOBSERVER_ONAUDIOVOLUMEINDICATION_46f8ab7;

            jsonObj.Clear();

            int volume = ParamsHelper.CreateParam<int>();
            jsonObj.Add("volume", volume);

            var jsonString = LitJson.JsonMapper.ToJson(jsonObj);
            ApiParam.data = jsonString;
            ApiParam.data_size = (uint)jsonString.Length;

            int ret = DLLHelper.TriggerEventWithFakeRtcEngine(FakeRtcEnginePtr, ref ApiParam);
            Assert.AreEqual(0, ret);
            Assert.AreEqual(true, callback.OnAudioVolumeIndicationPassed(volume));
        }

    }
}