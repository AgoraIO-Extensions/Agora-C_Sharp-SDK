#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using System;
using Agora.Rtc;
namespace Agora.Rtc.Ut
{
    public partial class UTRtcEngineEventHandler : IRtcEngineEventHandler
    {
        public bool OnProxyConnected_9f89fd0_be_trigger = false;
        public string OnProxyConnected_9f89fd0_channel;
        public uint OnProxyConnected_9f89fd0_uid;
        public PROXY_TYPE OnProxyConnected_9f89fd0_proxyType;
        public string OnProxyConnected_9f89fd0_localProxyIp;
        public int OnProxyConnected_9f89fd0_elapsed;

        public override void OnProxyConnected(string channel, uint uid, PROXY_TYPE proxyType, string localProxyIp, int elapsed)
        {
            OnProxyConnected_9f89fd0_be_trigger = true;
            OnProxyConnected_9f89fd0_channel = channel;
            OnProxyConnected_9f89fd0_uid = uid;
            OnProxyConnected_9f89fd0_proxyType = proxyType;
            OnProxyConnected_9f89fd0_localProxyIp = localProxyIp;
            OnProxyConnected_9f89fd0_elapsed = elapsed;
        }

        public bool OnProxyConnectedPassed(string channel, uint uid, PROXY_TYPE proxyType, string localProxyIp, int elapsed)
        {
            if (OnProxyConnected_9f89fd0_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnProxyConnected_9f89fd0_channel, channel) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnProxyConnected_9f89fd0_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<PROXY_TYPE>(OnProxyConnected_9f89fd0_proxyType, proxyType) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnProxyConnected_9f89fd0_localProxyIp, localProxyIp) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnProxyConnected_9f89fd0_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnError_d26c0fd_be_trigger = false;
        public int OnError_d26c0fd_err;
        public string OnError_d26c0fd_msg;

        public override void OnError(int err, string msg)
        {
            OnError_d26c0fd_be_trigger = true;
            OnError_d26c0fd_err = err;
            OnError_d26c0fd_msg = msg;
        }

        public bool OnErrorPassed(int err, string msg)
        {
            if (OnError_d26c0fd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnError_d26c0fd_err, err) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnError_d26c0fd_msg, msg) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLastmileProbeResult_42b5843_be_trigger = false;
        public LastmileProbeResult OnLastmileProbeResult_42b5843_result;

        public override void OnLastmileProbeResult(LastmileProbeResult result)
        {
            OnLastmileProbeResult_42b5843_be_trigger = true;
            OnLastmileProbeResult_42b5843_result = result;
        }

        public bool OnLastmileProbeResultPassed(LastmileProbeResult result)
        {
            if (OnLastmileProbeResult_42b5843_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<LastmileProbeResult>(OnLastmileProbeResult_42b5843_result, result) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioDeviceStateChanged_976d8c3_be_trigger = false;
        public string OnAudioDeviceStateChanged_976d8c3_deviceId;
        public MEDIA_DEVICE_TYPE OnAudioDeviceStateChanged_976d8c3_deviceType;
        public MEDIA_DEVICE_STATE_TYPE OnAudioDeviceStateChanged_976d8c3_deviceState;

        public override void OnAudioDeviceStateChanged(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
        {
            OnAudioDeviceStateChanged_976d8c3_be_trigger = true;
            OnAudioDeviceStateChanged_976d8c3_deviceId = deviceId;
            OnAudioDeviceStateChanged_976d8c3_deviceType = deviceType;
            OnAudioDeviceStateChanged_976d8c3_deviceState = deviceState;
        }

        public bool OnAudioDeviceStateChangedPassed(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
        {
            if (OnAudioDeviceStateChanged_976d8c3_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnAudioDeviceStateChanged_976d8c3_deviceId, deviceId) == false)
                return false;
            if (ParamsHelper.Compare<MEDIA_DEVICE_TYPE>(OnAudioDeviceStateChanged_976d8c3_deviceType, deviceType) == false)
                return false;
            if (ParamsHelper.Compare<MEDIA_DEVICE_STATE_TYPE>(OnAudioDeviceStateChanged_976d8c3_deviceState, deviceState) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioMixingPositionChanged_f631116_be_trigger = false;
        public long OnAudioMixingPositionChanged_f631116_position;

        public override void OnAudioMixingPositionChanged(long position)
        {
            OnAudioMixingPositionChanged_f631116_be_trigger = true;
            OnAudioMixingPositionChanged_f631116_position = position;
        }

        public bool OnAudioMixingPositionChangedPassed(long position)
        {
            if (OnAudioMixingPositionChanged_f631116_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<long>(OnAudioMixingPositionChanged_f631116_position, position) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioMixingFinished_be_trigger = false;

        public override void OnAudioMixingFinished()
        {
            OnAudioMixingFinished_be_trigger = true;
        }

        public bool OnAudioMixingFinishedPassed()
        {
            if (OnAudioMixingFinished_be_trigger == false)
                return false;


            return true;
        }

        /////////////////////////////////

        public bool OnAudioEffectFinished_46f8ab7_be_trigger = false;
        public int OnAudioEffectFinished_46f8ab7_soundId;

        public override void OnAudioEffectFinished(int soundId)
        {
            OnAudioEffectFinished_46f8ab7_be_trigger = true;
            OnAudioEffectFinished_46f8ab7_soundId = soundId;
        }

        public bool OnAudioEffectFinishedPassed(int soundId)
        {
            if (OnAudioEffectFinished_46f8ab7_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnAudioEffectFinished_46f8ab7_soundId, soundId) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnVideoDeviceStateChanged_976d8c3_be_trigger = false;
        public string OnVideoDeviceStateChanged_976d8c3_deviceId;
        public MEDIA_DEVICE_TYPE OnVideoDeviceStateChanged_976d8c3_deviceType;
        public MEDIA_DEVICE_STATE_TYPE OnVideoDeviceStateChanged_976d8c3_deviceState;

        public override void OnVideoDeviceStateChanged(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
        {
            OnVideoDeviceStateChanged_976d8c3_be_trigger = true;
            OnVideoDeviceStateChanged_976d8c3_deviceId = deviceId;
            OnVideoDeviceStateChanged_976d8c3_deviceType = deviceType;
            OnVideoDeviceStateChanged_976d8c3_deviceState = deviceState;
        }

        public bool OnVideoDeviceStateChangedPassed(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
        {
            if (OnVideoDeviceStateChanged_976d8c3_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnVideoDeviceStateChanged_976d8c3_deviceId, deviceId) == false)
                return false;
            if (ParamsHelper.Compare<MEDIA_DEVICE_TYPE>(OnVideoDeviceStateChanged_976d8c3_deviceType, deviceType) == false)
                return false;
            if (ParamsHelper.Compare<MEDIA_DEVICE_STATE_TYPE>(OnVideoDeviceStateChanged_976d8c3_deviceState, deviceState) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnPipStateChanged_941b366_be_trigger = false;
        public PIP_STATE OnPipStateChanged_941b366_state;

        public override void OnPipStateChanged(PIP_STATE state)
        {
            OnPipStateChanged_941b366_be_trigger = true;
            OnPipStateChanged_941b366_state = state;
        }

        public bool OnPipStateChangedPassed(PIP_STATE state)
        {
            if (OnPipStateChanged_941b366_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<PIP_STATE>(OnPipStateChanged_941b366_state, state) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUplinkNetworkInfoUpdated_cbb1856_be_trigger = false;
        public UplinkNetworkInfo OnUplinkNetworkInfoUpdated_cbb1856_info;

        public override void OnUplinkNetworkInfoUpdated(UplinkNetworkInfo info)
        {
            OnUplinkNetworkInfoUpdated_cbb1856_be_trigger = true;
            OnUplinkNetworkInfoUpdated_cbb1856_info = info;
        }

        public bool OnUplinkNetworkInfoUpdatedPassed(UplinkNetworkInfo info)
        {
            if (OnUplinkNetworkInfoUpdated_cbb1856_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<UplinkNetworkInfo>(OnUplinkNetworkInfoUpdated_cbb1856_info, info) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnDownlinkNetworkInfoUpdated_e9d5bd9_be_trigger = false;
        public DownlinkNetworkInfo OnDownlinkNetworkInfoUpdated_e9d5bd9_info;

        public override void OnDownlinkNetworkInfoUpdated(DownlinkNetworkInfo info)
        {
            OnDownlinkNetworkInfoUpdated_e9d5bd9_be_trigger = true;
            OnDownlinkNetworkInfoUpdated_e9d5bd9_info = info;
        }

        public bool OnDownlinkNetworkInfoUpdatedPassed(DownlinkNetworkInfo info)
        {
            if (OnDownlinkNetworkInfoUpdated_e9d5bd9_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<DownlinkNetworkInfo>(OnDownlinkNetworkInfoUpdated_e9d5bd9_info, info) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLastmileQuality_46f8ab7_be_trigger = false;
        public int OnLastmileQuality_46f8ab7_quality;

        public override void OnLastmileQuality(int quality)
        {
            OnLastmileQuality_46f8ab7_be_trigger = true;
            OnLastmileQuality_46f8ab7_quality = quality;
        }

        public bool OnLastmileQualityPassed(int quality)
        {
            if (OnLastmileQuality_46f8ab7_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnLastmileQuality_46f8ab7_quality, quality) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstLocalVideoFrame_ebdfd19_be_trigger = false;
        public VIDEO_SOURCE_TYPE OnFirstLocalVideoFrame_ebdfd19_source;
        public int OnFirstLocalVideoFrame_ebdfd19_width;
        public int OnFirstLocalVideoFrame_ebdfd19_height;
        public int OnFirstLocalVideoFrame_ebdfd19_elapsed;

        public override void OnFirstLocalVideoFrame(VIDEO_SOURCE_TYPE source, int width, int height, int elapsed)
        {
            OnFirstLocalVideoFrame_ebdfd19_be_trigger = true;
            OnFirstLocalVideoFrame_ebdfd19_source = source;
            OnFirstLocalVideoFrame_ebdfd19_width = width;
            OnFirstLocalVideoFrame_ebdfd19_height = height;
            OnFirstLocalVideoFrame_ebdfd19_elapsed = elapsed;
        }

        public bool OnFirstLocalVideoFramePassed(VIDEO_SOURCE_TYPE source, int width, int height, int elapsed)
        {
            if (OnFirstLocalVideoFrame_ebdfd19_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<VIDEO_SOURCE_TYPE>(OnFirstLocalVideoFrame_ebdfd19_source, source) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstLocalVideoFrame_ebdfd19_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstLocalVideoFrame_ebdfd19_height, height) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstLocalVideoFrame_ebdfd19_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalVideoStateChanged_a44228a_be_trigger = false;
        public VIDEO_SOURCE_TYPE OnLocalVideoStateChanged_a44228a_source;
        public LOCAL_VIDEO_STREAM_STATE OnLocalVideoStateChanged_a44228a_state;
        public LOCAL_VIDEO_STREAM_REASON OnLocalVideoStateChanged_a44228a_reason;

        public override void OnLocalVideoStateChanged(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_REASON reason)
        {
            OnLocalVideoStateChanged_a44228a_be_trigger = true;
            OnLocalVideoStateChanged_a44228a_source = source;
            OnLocalVideoStateChanged_a44228a_state = state;
            OnLocalVideoStateChanged_a44228a_reason = reason;
        }

        public bool OnLocalVideoStateChangedPassed(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_REASON reason)
        {
            if (OnLocalVideoStateChanged_a44228a_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<VIDEO_SOURCE_TYPE>(OnLocalVideoStateChanged_a44228a_source, source) == false)
                return false;
            if (ParamsHelper.Compare<LOCAL_VIDEO_STREAM_STATE>(OnLocalVideoStateChanged_a44228a_state, state) == false)
                return false;
            if (ParamsHelper.Compare<LOCAL_VIDEO_STREAM_REASON>(OnLocalVideoStateChanged_a44228a_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnCameraReady_be_trigger = false;

        public override void OnCameraReady()
        {
            OnCameraReady_be_trigger = true;
        }

        public bool OnCameraReadyPassed()
        {
            if (OnCameraReady_be_trigger == false)
                return false;


            return true;
        }

        /////////////////////////////////

        public bool OnCameraFocusAreaChanged_41c5354_be_trigger = false;
        public int OnCameraFocusAreaChanged_41c5354_x;
        public int OnCameraFocusAreaChanged_41c5354_y;
        public int OnCameraFocusAreaChanged_41c5354_width;
        public int OnCameraFocusAreaChanged_41c5354_height;

        public override void OnCameraFocusAreaChanged(int x, int y, int width, int height)
        {
            OnCameraFocusAreaChanged_41c5354_be_trigger = true;
            OnCameraFocusAreaChanged_41c5354_x = x;
            OnCameraFocusAreaChanged_41c5354_y = y;
            OnCameraFocusAreaChanged_41c5354_width = width;
            OnCameraFocusAreaChanged_41c5354_height = height;
        }

        public bool OnCameraFocusAreaChangedPassed(int x, int y, int width, int height)
        {
            if (OnCameraFocusAreaChanged_41c5354_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnCameraFocusAreaChanged_41c5354_x, x) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnCameraFocusAreaChanged_41c5354_y, y) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnCameraFocusAreaChanged_41c5354_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnCameraFocusAreaChanged_41c5354_height, height) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnCameraExposureAreaChanged_41c5354_be_trigger = false;
        public int OnCameraExposureAreaChanged_41c5354_x;
        public int OnCameraExposureAreaChanged_41c5354_y;
        public int OnCameraExposureAreaChanged_41c5354_width;
        public int OnCameraExposureAreaChanged_41c5354_height;

        public override void OnCameraExposureAreaChanged(int x, int y, int width, int height)
        {
            OnCameraExposureAreaChanged_41c5354_be_trigger = true;
            OnCameraExposureAreaChanged_41c5354_x = x;
            OnCameraExposureAreaChanged_41c5354_y = y;
            OnCameraExposureAreaChanged_41c5354_width = width;
            OnCameraExposureAreaChanged_41c5354_height = height;
        }

        public bool OnCameraExposureAreaChangedPassed(int x, int y, int width, int height)
        {
            if (OnCameraExposureAreaChanged_41c5354_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnCameraExposureAreaChanged_41c5354_x, x) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnCameraExposureAreaChanged_41c5354_y, y) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnCameraExposureAreaChanged_41c5354_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnCameraExposureAreaChanged_41c5354_height, height) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFacePositionChanged_197b4a7_be_trigger = false;
        public int OnFacePositionChanged_197b4a7_imageWidth;
        public int OnFacePositionChanged_197b4a7_imageHeight;
        public Rectangle[] OnFacePositionChanged_197b4a7_vecRectangle;
        public int[] OnFacePositionChanged_197b4a7_vecDistance;
        public int OnFacePositionChanged_197b4a7_numFaces;

        public override void OnFacePositionChanged(int imageWidth, int imageHeight, Rectangle[] vecRectangle, int[] vecDistance, int numFaces)
        {
            OnFacePositionChanged_197b4a7_be_trigger = true;
            OnFacePositionChanged_197b4a7_imageWidth = imageWidth;
            OnFacePositionChanged_197b4a7_imageHeight = imageHeight;
            OnFacePositionChanged_197b4a7_vecRectangle = vecRectangle;
            OnFacePositionChanged_197b4a7_vecDistance = vecDistance;
            OnFacePositionChanged_197b4a7_numFaces = numFaces;
        }

        public bool OnFacePositionChangedPassed(int imageWidth, int imageHeight, Rectangle[] vecRectangle, int[] vecDistance, int numFaces)
        {
            if (OnFacePositionChanged_197b4a7_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnFacePositionChanged_197b4a7_imageWidth, imageWidth) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFacePositionChanged_197b4a7_imageHeight, imageHeight) == false)
                return false;
            if (ParamsHelper.Compare<Rectangle[]>(OnFacePositionChanged_197b4a7_vecRectangle, vecRectangle) == false)
                return false;
            if (ParamsHelper.Compare<int[]>(OnFacePositionChanged_197b4a7_vecDistance, vecDistance) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFacePositionChanged_197b4a7_numFaces, numFaces) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnVideoStopped_be_trigger = false;

        public override void OnVideoStopped()
        {
            OnVideoStopped_be_trigger = true;
        }

        public bool OnVideoStoppedPassed()
        {
            if (OnVideoStopped_be_trigger == false)
                return false;


            return true;
        }

        /////////////////////////////////

        public bool OnAudioMixingStateChanged_fd2c0a6_be_trigger = false;
        public AUDIO_MIXING_STATE_TYPE OnAudioMixingStateChanged_fd2c0a6_state;
        public AUDIO_MIXING_REASON_TYPE OnAudioMixingStateChanged_fd2c0a6_reason;

        public override void OnAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)
        {
            OnAudioMixingStateChanged_fd2c0a6_be_trigger = true;
            OnAudioMixingStateChanged_fd2c0a6_state = state;
            OnAudioMixingStateChanged_fd2c0a6_reason = reason;
        }

        public bool OnAudioMixingStateChangedPassed(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)
        {
            if (OnAudioMixingStateChanged_fd2c0a6_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<AUDIO_MIXING_STATE_TYPE>(OnAudioMixingStateChanged_fd2c0a6_state, state) == false)
                return false;
            if (ParamsHelper.Compare<AUDIO_MIXING_REASON_TYPE>(OnAudioMixingStateChanged_fd2c0a6_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRhythmPlayerStateChanged_09360d2_be_trigger = false;
        public RHYTHM_PLAYER_STATE_TYPE OnRhythmPlayerStateChanged_09360d2_state;
        public RHYTHM_PLAYER_REASON OnRhythmPlayerStateChanged_09360d2_reason;

        public override void OnRhythmPlayerStateChanged(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_REASON reason)
        {
            OnRhythmPlayerStateChanged_09360d2_be_trigger = true;
            OnRhythmPlayerStateChanged_09360d2_state = state;
            OnRhythmPlayerStateChanged_09360d2_reason = reason;
        }

        public bool OnRhythmPlayerStateChangedPassed(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_REASON reason)
        {
            if (OnRhythmPlayerStateChanged_09360d2_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RHYTHM_PLAYER_STATE_TYPE>(OnRhythmPlayerStateChanged_09360d2_state, state) == false)
                return false;
            if (ParamsHelper.Compare<RHYTHM_PLAYER_REASON>(OnRhythmPlayerStateChanged_09360d2_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnContentInspectResult_ba185c8_be_trigger = false;
        public CONTENT_INSPECT_RESULT OnContentInspectResult_ba185c8_result;

        public override void OnContentInspectResult(CONTENT_INSPECT_RESULT result)
        {
            OnContentInspectResult_ba185c8_be_trigger = true;
            OnContentInspectResult_ba185c8_result = result;
        }

        public bool OnContentInspectResultPassed(CONTENT_INSPECT_RESULT result)
        {
            if (OnContentInspectResult_ba185c8_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<CONTENT_INSPECT_RESULT>(OnContentInspectResult_ba185c8_result, result) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioDeviceVolumeChanged_55ab726_be_trigger = false;
        public MEDIA_DEVICE_TYPE OnAudioDeviceVolumeChanged_55ab726_deviceType;
        public int OnAudioDeviceVolumeChanged_55ab726_volume;
        public bool OnAudioDeviceVolumeChanged_55ab726_muted;

        public override void OnAudioDeviceVolumeChanged(MEDIA_DEVICE_TYPE deviceType, int volume, bool muted)
        {
            OnAudioDeviceVolumeChanged_55ab726_be_trigger = true;
            OnAudioDeviceVolumeChanged_55ab726_deviceType = deviceType;
            OnAudioDeviceVolumeChanged_55ab726_volume = volume;
            OnAudioDeviceVolumeChanged_55ab726_muted = muted;
        }

        public bool OnAudioDeviceVolumeChangedPassed(MEDIA_DEVICE_TYPE deviceType, int volume, bool muted)
        {
            if (OnAudioDeviceVolumeChanged_55ab726_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<MEDIA_DEVICE_TYPE>(OnAudioDeviceVolumeChanged_55ab726_deviceType, deviceType) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnAudioDeviceVolumeChanged_55ab726_volume, volume) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnAudioDeviceVolumeChanged_55ab726_muted, muted) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRtmpStreamingStateChanged_1f07503_be_trigger = false;
        public string OnRtmpStreamingStateChanged_1f07503_url;
        public RTMP_STREAM_PUBLISH_STATE OnRtmpStreamingStateChanged_1f07503_state;
        public RTMP_STREAM_PUBLISH_REASON OnRtmpStreamingStateChanged_1f07503_reason;

        public override void OnRtmpStreamingStateChanged(string url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_REASON reason)
        {
            OnRtmpStreamingStateChanged_1f07503_be_trigger = true;
            OnRtmpStreamingStateChanged_1f07503_url = url;
            OnRtmpStreamingStateChanged_1f07503_state = state;
            OnRtmpStreamingStateChanged_1f07503_reason = reason;
        }

        public bool OnRtmpStreamingStateChangedPassed(string url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_REASON reason)
        {
            if (OnRtmpStreamingStateChanged_1f07503_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnRtmpStreamingStateChanged_1f07503_url, url) == false)
                return false;
            if (ParamsHelper.Compare<RTMP_STREAM_PUBLISH_STATE>(OnRtmpStreamingStateChanged_1f07503_state, state) == false)
                return false;
            if (ParamsHelper.Compare<RTMP_STREAM_PUBLISH_REASON>(OnRtmpStreamingStateChanged_1f07503_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRtmpStreamingEvent_2e48ef5_be_trigger = false;
        public string OnRtmpStreamingEvent_2e48ef5_url;
        public RTMP_STREAMING_EVENT OnRtmpStreamingEvent_2e48ef5_eventCode;

        public override void OnRtmpStreamingEvent(string url, RTMP_STREAMING_EVENT eventCode)
        {
            OnRtmpStreamingEvent_2e48ef5_be_trigger = true;
            OnRtmpStreamingEvent_2e48ef5_url = url;
            OnRtmpStreamingEvent_2e48ef5_eventCode = eventCode;
        }

        public bool OnRtmpStreamingEventPassed(string url, RTMP_STREAMING_EVENT eventCode)
        {
            if (OnRtmpStreamingEvent_2e48ef5_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnRtmpStreamingEvent_2e48ef5_url, url) == false)
                return false;
            if (ParamsHelper.Compare<RTMP_STREAMING_EVENT>(OnRtmpStreamingEvent_2e48ef5_eventCode, eventCode) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnTranscodingUpdated_be_trigger = false;

        public override void OnTranscodingUpdated()
        {
            OnTranscodingUpdated_be_trigger = true;
        }

        public bool OnTranscodingUpdatedPassed()
        {
            if (OnTranscodingUpdated_be_trigger == false)
                return false;


            return true;
        }

        /////////////////////////////////

        public bool OnAudioRoutingChanged_46f8ab7_be_trigger = false;
        public int OnAudioRoutingChanged_46f8ab7_routing;

        public override void OnAudioRoutingChanged(int routing)
        {
            OnAudioRoutingChanged_46f8ab7_be_trigger = true;
            OnAudioRoutingChanged_46f8ab7_routing = routing;
        }

        public bool OnAudioRoutingChangedPassed(int routing)
        {
            if (OnAudioRoutingChanged_46f8ab7_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnAudioRoutingChanged_46f8ab7_routing, routing) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnChannelMediaRelayStateChanged_4e92b3c_be_trigger = false;
        public int OnChannelMediaRelayStateChanged_4e92b3c_state;
        public int OnChannelMediaRelayStateChanged_4e92b3c_code;

        public override void OnChannelMediaRelayStateChanged(int state, int code)
        {
            OnChannelMediaRelayStateChanged_4e92b3c_be_trigger = true;
            OnChannelMediaRelayStateChanged_4e92b3c_state = state;
            OnChannelMediaRelayStateChanged_4e92b3c_code = code;
        }

        public bool OnChannelMediaRelayStateChangedPassed(int state, int code)
        {
            if (OnChannelMediaRelayStateChanged_4e92b3c_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<int>(OnChannelMediaRelayStateChanged_4e92b3c_state, state) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnChannelMediaRelayStateChanged_4e92b3c_code, code) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalPublishFallbackToAudioOnly_5039d15_be_trigger = false;
        public bool OnLocalPublishFallbackToAudioOnly_5039d15_isFallbackOrRecover;

        public override void OnLocalPublishFallbackToAudioOnly(bool isFallbackOrRecover)
        {
            OnLocalPublishFallbackToAudioOnly_5039d15_be_trigger = true;
            OnLocalPublishFallbackToAudioOnly_5039d15_isFallbackOrRecover = isFallbackOrRecover;
        }

        public bool OnLocalPublishFallbackToAudioOnlyPassed(bool isFallbackOrRecover)
        {
            if (OnLocalPublishFallbackToAudioOnly_5039d15_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<bool>(OnLocalPublishFallbackToAudioOnly_5039d15_isFallbackOrRecover, isFallbackOrRecover) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_be_trigger = false;
        public uint OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_uid;
        public bool OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_isFallbackOrRecover;

        public override void OnRemoteSubscribeFallbackToAudioOnly(uint uid, bool isFallbackOrRecover)
        {
            OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_be_trigger = true;
            OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_uid = uid;
            OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_isFallbackOrRecover = isFallbackOrRecover;
        }

        public bool OnRemoteSubscribeFallbackToAudioOnlyPassed(uint uid, bool isFallbackOrRecover)
        {
            if (OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<uint>(OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnRemoteSubscribeFallbackToAudioOnly_dbdc15a_isFallbackOrRecover, isFallbackOrRecover) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnPermissionError_f37c62b_be_trigger = false;
        public PERMISSION_TYPE OnPermissionError_f37c62b_permissionType;

        public override void OnPermissionError(PERMISSION_TYPE permissionType)
        {
            OnPermissionError_f37c62b_be_trigger = true;
            OnPermissionError_f37c62b_permissionType = permissionType;
        }

        public bool OnPermissionErrorPassed(PERMISSION_TYPE permissionType)
        {
            if (OnPermissionError_f37c62b_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<PERMISSION_TYPE>(OnPermissionError_f37c62b_permissionType, permissionType) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalUserRegistered_1922dd1_be_trigger = false;
        public uint OnLocalUserRegistered_1922dd1_uid;
        public string OnLocalUserRegistered_1922dd1_userAccount;

        public override void OnLocalUserRegistered(uint uid, string userAccount)
        {
            OnLocalUserRegistered_1922dd1_be_trigger = true;
            OnLocalUserRegistered_1922dd1_uid = uid;
            OnLocalUserRegistered_1922dd1_userAccount = userAccount;
        }

        public bool OnLocalUserRegisteredPassed(uint uid, string userAccount)
        {
            if (OnLocalUserRegistered_1922dd1_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<uint>(OnLocalUserRegistered_1922dd1_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnLocalUserRegistered_1922dd1_userAccount, userAccount) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserInfoUpdated_2120245_be_trigger = false;
        public uint OnUserInfoUpdated_2120245_uid;
        public UserInfo OnUserInfoUpdated_2120245_info;

        public override void OnUserInfoUpdated(uint uid, UserInfo info)
        {
            OnUserInfoUpdated_2120245_be_trigger = true;
            OnUserInfoUpdated_2120245_uid = uid;
            OnUserInfoUpdated_2120245_info = info;
        }

        public bool OnUserInfoUpdatedPassed(uint uid, UserInfo info)
        {
            if (OnUserInfoUpdated_2120245_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<uint>(OnUserInfoUpdated_2120245_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<UserInfo>(OnUserInfoUpdated_2120245_info, info) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalVideoTranscoderError_83e3a9c_be_trigger = false;
        public TranscodingVideoStream OnLocalVideoTranscoderError_83e3a9c_stream;
        public VIDEO_TRANSCODER_ERROR OnLocalVideoTranscoderError_83e3a9c_error;

        public override void OnLocalVideoTranscoderError(TranscodingVideoStream stream, VIDEO_TRANSCODER_ERROR error)
        {
            OnLocalVideoTranscoderError_83e3a9c_be_trigger = true;
            OnLocalVideoTranscoderError_83e3a9c_stream = stream;
            OnLocalVideoTranscoderError_83e3a9c_error = error;
        }

        public bool OnLocalVideoTranscoderErrorPassed(TranscodingVideoStream stream, VIDEO_TRANSCODER_ERROR error)
        {
            if (OnLocalVideoTranscoderError_83e3a9c_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<TranscodingVideoStream>(OnLocalVideoTranscoderError_83e3a9c_stream, stream) == false)
                return false;
            if (ParamsHelper.Compare<VIDEO_TRANSCODER_ERROR>(OnLocalVideoTranscoderError_83e3a9c_error, error) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioSubscribeStateChanged_e0ec28e_be_trigger = false;
        public string OnAudioSubscribeStateChanged_e0ec28e_channel;
        public uint OnAudioSubscribeStateChanged_e0ec28e_uid;
        public STREAM_SUBSCRIBE_STATE OnAudioSubscribeStateChanged_e0ec28e_oldState;
        public STREAM_SUBSCRIBE_STATE OnAudioSubscribeStateChanged_e0ec28e_newState;
        public int OnAudioSubscribeStateChanged_e0ec28e_elapseSinceLastState;

        public override void OnAudioSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
        {
            OnAudioSubscribeStateChanged_e0ec28e_be_trigger = true;
            OnAudioSubscribeStateChanged_e0ec28e_channel = channel;
            OnAudioSubscribeStateChanged_e0ec28e_uid = uid;
            OnAudioSubscribeStateChanged_e0ec28e_oldState = oldState;
            OnAudioSubscribeStateChanged_e0ec28e_newState = newState;
            OnAudioSubscribeStateChanged_e0ec28e_elapseSinceLastState = elapseSinceLastState;
        }

        public bool OnAudioSubscribeStateChangedPassed(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
        {
            if (OnAudioSubscribeStateChanged_e0ec28e_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnAudioSubscribeStateChanged_e0ec28e_channel, channel) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnAudioSubscribeStateChanged_e0ec28e_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_SUBSCRIBE_STATE>(OnAudioSubscribeStateChanged_e0ec28e_oldState, oldState) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_SUBSCRIBE_STATE>(OnAudioSubscribeStateChanged_e0ec28e_newState, newState) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnAudioSubscribeStateChanged_e0ec28e_elapseSinceLastState, elapseSinceLastState) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnVideoSubscribeStateChanged_e0ec28e_be_trigger = false;
        public string OnVideoSubscribeStateChanged_e0ec28e_channel;
        public uint OnVideoSubscribeStateChanged_e0ec28e_uid;
        public STREAM_SUBSCRIBE_STATE OnVideoSubscribeStateChanged_e0ec28e_oldState;
        public STREAM_SUBSCRIBE_STATE OnVideoSubscribeStateChanged_e0ec28e_newState;
        public int OnVideoSubscribeStateChanged_e0ec28e_elapseSinceLastState;

        public override void OnVideoSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
        {
            OnVideoSubscribeStateChanged_e0ec28e_be_trigger = true;
            OnVideoSubscribeStateChanged_e0ec28e_channel = channel;
            OnVideoSubscribeStateChanged_e0ec28e_uid = uid;
            OnVideoSubscribeStateChanged_e0ec28e_oldState = oldState;
            OnVideoSubscribeStateChanged_e0ec28e_newState = newState;
            OnVideoSubscribeStateChanged_e0ec28e_elapseSinceLastState = elapseSinceLastState;
        }

        public bool OnVideoSubscribeStateChangedPassed(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
        {
            if (OnVideoSubscribeStateChanged_e0ec28e_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnVideoSubscribeStateChanged_e0ec28e_channel, channel) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnVideoSubscribeStateChanged_e0ec28e_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_SUBSCRIBE_STATE>(OnVideoSubscribeStateChanged_e0ec28e_oldState, oldState) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_SUBSCRIBE_STATE>(OnVideoSubscribeStateChanged_e0ec28e_newState, newState) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnVideoSubscribeStateChanged_e0ec28e_elapseSinceLastState, elapseSinceLastState) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioPublishStateChanged_2c13a28_be_trigger = false;
        public string OnAudioPublishStateChanged_2c13a28_channel;
        public STREAM_PUBLISH_STATE OnAudioPublishStateChanged_2c13a28_oldState;
        public STREAM_PUBLISH_STATE OnAudioPublishStateChanged_2c13a28_newState;
        public int OnAudioPublishStateChanged_2c13a28_elapseSinceLastState;

        public override void OnAudioPublishStateChanged(string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
        {
            OnAudioPublishStateChanged_2c13a28_be_trigger = true;
            OnAudioPublishStateChanged_2c13a28_channel = channel;
            OnAudioPublishStateChanged_2c13a28_oldState = oldState;
            OnAudioPublishStateChanged_2c13a28_newState = newState;
            OnAudioPublishStateChanged_2c13a28_elapseSinceLastState = elapseSinceLastState;
        }

        public bool OnAudioPublishStateChangedPassed(string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
        {
            if (OnAudioPublishStateChanged_2c13a28_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnAudioPublishStateChanged_2c13a28_channel, channel) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_PUBLISH_STATE>(OnAudioPublishStateChanged_2c13a28_oldState, oldState) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_PUBLISH_STATE>(OnAudioPublishStateChanged_2c13a28_newState, newState) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnAudioPublishStateChanged_2c13a28_elapseSinceLastState, elapseSinceLastState) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnVideoPublishStateChanged_5b45b6e_be_trigger = false;
        public VIDEO_SOURCE_TYPE OnVideoPublishStateChanged_5b45b6e_source;
        public string OnVideoPublishStateChanged_5b45b6e_channel;
        public STREAM_PUBLISH_STATE OnVideoPublishStateChanged_5b45b6e_oldState;
        public STREAM_PUBLISH_STATE OnVideoPublishStateChanged_5b45b6e_newState;
        public int OnVideoPublishStateChanged_5b45b6e_elapseSinceLastState;

        public override void OnVideoPublishStateChanged(VIDEO_SOURCE_TYPE source, string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
        {
            OnVideoPublishStateChanged_5b45b6e_be_trigger = true;
            OnVideoPublishStateChanged_5b45b6e_source = source;
            OnVideoPublishStateChanged_5b45b6e_channel = channel;
            OnVideoPublishStateChanged_5b45b6e_oldState = oldState;
            OnVideoPublishStateChanged_5b45b6e_newState = newState;
            OnVideoPublishStateChanged_5b45b6e_elapseSinceLastState = elapseSinceLastState;
        }

        public bool OnVideoPublishStateChangedPassed(VIDEO_SOURCE_TYPE source, string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
        {
            if (OnVideoPublishStateChanged_5b45b6e_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<VIDEO_SOURCE_TYPE>(OnVideoPublishStateChanged_5b45b6e_source, source) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnVideoPublishStateChanged_5b45b6e_channel, channel) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_PUBLISH_STATE>(OnVideoPublishStateChanged_5b45b6e_oldState, oldState) == false)
                return false;
            if (ParamsHelper.Compare<STREAM_PUBLISH_STATE>(OnVideoPublishStateChanged_5b45b6e_newState, newState) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnVideoPublishStateChanged_5b45b6e_elapseSinceLastState, elapseSinceLastState) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnExtensionEvent_062d13c_be_trigger = false;
        public string OnExtensionEvent_062d13c_provider;
        public string OnExtensionEvent_062d13c_extension;
        public string OnExtensionEvent_062d13c_key;
        public string OnExtensionEvent_062d13c_value;

        public override void OnExtensionEvent(string provider, string extension, string key, string value)
        {
            OnExtensionEvent_062d13c_be_trigger = true;
            OnExtensionEvent_062d13c_provider = provider;
            OnExtensionEvent_062d13c_extension = extension;
            OnExtensionEvent_062d13c_key = key;
            OnExtensionEvent_062d13c_value = value;
        }

        public bool OnExtensionEventPassed(string provider, string extension, string key, string value)
        {
            if (OnExtensionEvent_062d13c_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnExtensionEvent_062d13c_provider, provider) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionEvent_062d13c_extension, extension) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionEvent_062d13c_key, key) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionEvent_062d13c_value, value) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnExtensionStarted_ccad422_be_trigger = false;
        public string OnExtensionStarted_ccad422_provider;
        public string OnExtensionStarted_ccad422_extension;

        public override void OnExtensionStarted(string provider, string extension)
        {
            OnExtensionStarted_ccad422_be_trigger = true;
            OnExtensionStarted_ccad422_provider = provider;
            OnExtensionStarted_ccad422_extension = extension;
        }

        public bool OnExtensionStartedPassed(string provider, string extension)
        {
            if (OnExtensionStarted_ccad422_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnExtensionStarted_ccad422_provider, provider) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionStarted_ccad422_extension, extension) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnExtensionStopped_ccad422_be_trigger = false;
        public string OnExtensionStopped_ccad422_provider;
        public string OnExtensionStopped_ccad422_extension;

        public override void OnExtensionStopped(string provider, string extension)
        {
            OnExtensionStopped_ccad422_be_trigger = true;
            OnExtensionStopped_ccad422_provider = provider;
            OnExtensionStopped_ccad422_extension = extension;
        }

        public bool OnExtensionStoppedPassed(string provider, string extension)
        {
            if (OnExtensionStopped_ccad422_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnExtensionStopped_ccad422_provider, provider) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionStopped_ccad422_extension, extension) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnExtensionError_bd3489b_be_trigger = false;
        public string OnExtensionError_bd3489b_provider;
        public string OnExtensionError_bd3489b_extension;
        public int OnExtensionError_bd3489b_error;
        public string OnExtensionError_bd3489b_message;

        public override void OnExtensionError(string provider, string extension, int error, string message)
        {
            OnExtensionError_bd3489b_be_trigger = true;
            OnExtensionError_bd3489b_provider = provider;
            OnExtensionError_bd3489b_extension = extension;
            OnExtensionError_bd3489b_error = error;
            OnExtensionError_bd3489b_message = message;
        }

        public bool OnExtensionErrorPassed(string provider, string extension, int error, string message)
        {
            if (OnExtensionError_bd3489b_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<string>(OnExtensionError_bd3489b_provider, provider) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionError_bd3489b_extension, extension) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnExtensionError_bd3489b_error, error) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnExtensionError_bd3489b_message, message) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnJoinChannelSuccess_263e4cd_be_trigger = false;
        public RtcConnection OnJoinChannelSuccess_263e4cd_connection;
        public int OnJoinChannelSuccess_263e4cd_elapsed;

        public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
        {
            OnJoinChannelSuccess_263e4cd_be_trigger = true;
            OnJoinChannelSuccess_263e4cd_connection = connection;
            OnJoinChannelSuccess_263e4cd_elapsed = elapsed;
        }

        public bool OnJoinChannelSuccessPassed(RtcConnection connection, int elapsed)
        {
            if (OnJoinChannelSuccess_263e4cd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnJoinChannelSuccess_263e4cd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnJoinChannelSuccess_263e4cd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRejoinChannelSuccess_263e4cd_be_trigger = false;
        public RtcConnection OnRejoinChannelSuccess_263e4cd_connection;
        public int OnRejoinChannelSuccess_263e4cd_elapsed;

        public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
        {
            OnRejoinChannelSuccess_263e4cd_be_trigger = true;
            OnRejoinChannelSuccess_263e4cd_connection = connection;
            OnRejoinChannelSuccess_263e4cd_elapsed = elapsed;
        }

        public bool OnRejoinChannelSuccessPassed(RtcConnection connection, int elapsed)
        {
            if (OnRejoinChannelSuccess_263e4cd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRejoinChannelSuccess_263e4cd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnRejoinChannelSuccess_263e4cd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioQuality_5c7294b_be_trigger = false;
        public RtcConnection OnAudioQuality_5c7294b_connection;
        public uint OnAudioQuality_5c7294b_remoteUid;
        public int OnAudioQuality_5c7294b_quality;
        public ushort OnAudioQuality_5c7294b_delay;
        public ushort OnAudioQuality_5c7294b_lost;

        public override void OnAudioQuality(RtcConnection connection, uint remoteUid, int quality, ushort delay, ushort lost)
        {
            OnAudioQuality_5c7294b_be_trigger = true;
            OnAudioQuality_5c7294b_connection = connection;
            OnAudioQuality_5c7294b_remoteUid = remoteUid;
            OnAudioQuality_5c7294b_quality = quality;
            OnAudioQuality_5c7294b_delay = delay;
            OnAudioQuality_5c7294b_lost = lost;
        }

        public bool OnAudioQualityPassed(RtcConnection connection, uint remoteUid, int quality, ushort delay, ushort lost)
        {
            if (OnAudioQuality_5c7294b_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnAudioQuality_5c7294b_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnAudioQuality_5c7294b_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnAudioQuality_5c7294b_quality, quality) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnAudioQuality_5c7294b_delay, delay) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnAudioQuality_5c7294b_lost, lost) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioVolumeIndication_781482a_be_trigger = false;
        public RtcConnection OnAudioVolumeIndication_781482a_connection;
        public AudioVolumeInfo[] OnAudioVolumeIndication_781482a_speakers;
        public uint OnAudioVolumeIndication_781482a_speakerNumber;
        public int OnAudioVolumeIndication_781482a_totalVolume;

        public override void OnAudioVolumeIndication(RtcConnection connection, AudioVolumeInfo[] speakers, uint speakerNumber, int totalVolume)
        {
            OnAudioVolumeIndication_781482a_be_trigger = true;
            OnAudioVolumeIndication_781482a_connection = connection;
            OnAudioVolumeIndication_781482a_speakers = speakers;
            OnAudioVolumeIndication_781482a_speakerNumber = speakerNumber;
            OnAudioVolumeIndication_781482a_totalVolume = totalVolume;
        }

        public bool OnAudioVolumeIndicationPassed(RtcConnection connection, AudioVolumeInfo[] speakers, uint speakerNumber, int totalVolume)
        {
            if (OnAudioVolumeIndication_781482a_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnAudioVolumeIndication_781482a_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<AudioVolumeInfo[]>(OnAudioVolumeIndication_781482a_speakers, speakers) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnAudioVolumeIndication_781482a_speakerNumber, speakerNumber) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnAudioVolumeIndication_781482a_totalVolume, totalVolume) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLeaveChannel_c8e730d_be_trigger = false;
        public RtcConnection OnLeaveChannel_c8e730d_connection;
        public RtcStats OnLeaveChannel_c8e730d_stats;

        public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
        {
            OnLeaveChannel_c8e730d_be_trigger = true;
            OnLeaveChannel_c8e730d_connection = connection;
            OnLeaveChannel_c8e730d_stats = stats;
        }

        public bool OnLeaveChannelPassed(RtcConnection connection, RtcStats stats)
        {
            if (OnLeaveChannel_c8e730d_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnLeaveChannel_c8e730d_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<RtcStats>(OnLeaveChannel_c8e730d_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRtcStats_c8e730d_be_trigger = false;
        public RtcConnection OnRtcStats_c8e730d_connection;
        public RtcStats OnRtcStats_c8e730d_stats;

        public override void OnRtcStats(RtcConnection connection, RtcStats stats)
        {
            OnRtcStats_c8e730d_be_trigger = true;
            OnRtcStats_c8e730d_connection = connection;
            OnRtcStats_c8e730d_stats = stats;
        }

        public bool OnRtcStatsPassed(RtcConnection connection, RtcStats stats)
        {
            if (OnRtcStats_c8e730d_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRtcStats_c8e730d_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<RtcStats>(OnRtcStats_c8e730d_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnNetworkQuality_34d8b3c_be_trigger = false;
        public RtcConnection OnNetworkQuality_34d8b3c_connection;
        public uint OnNetworkQuality_34d8b3c_remoteUid;
        public int OnNetworkQuality_34d8b3c_txQuality;
        public int OnNetworkQuality_34d8b3c_rxQuality;

        public override void OnNetworkQuality(RtcConnection connection, uint remoteUid, int txQuality, int rxQuality)
        {
            OnNetworkQuality_34d8b3c_be_trigger = true;
            OnNetworkQuality_34d8b3c_connection = connection;
            OnNetworkQuality_34d8b3c_remoteUid = remoteUid;
            OnNetworkQuality_34d8b3c_txQuality = txQuality;
            OnNetworkQuality_34d8b3c_rxQuality = rxQuality;
        }

        public bool OnNetworkQualityPassed(RtcConnection connection, uint remoteUid, int txQuality, int rxQuality)
        {
            if (OnNetworkQuality_34d8b3c_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnNetworkQuality_34d8b3c_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnNetworkQuality_34d8b3c_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnNetworkQuality_34d8b3c_txQuality, txQuality) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnNetworkQuality_34d8b3c_rxQuality, rxQuality) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnIntraRequestReceived_c81e1a4_be_trigger = false;
        public RtcConnection OnIntraRequestReceived_c81e1a4_connection;

        public override void OnIntraRequestReceived(RtcConnection connection)
        {
            OnIntraRequestReceived_c81e1a4_be_trigger = true;
            OnIntraRequestReceived_c81e1a4_connection = connection;
        }

        public bool OnIntraRequestReceivedPassed(RtcConnection connection)
        {
            if (OnIntraRequestReceived_c81e1a4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnIntraRequestReceived_c81e1a4_connection, connection) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstLocalVideoFramePublished_263e4cd_be_trigger = false;
        public RtcConnection OnFirstLocalVideoFramePublished_263e4cd_connection;
        public int OnFirstLocalVideoFramePublished_263e4cd_elapsed;

        public override void OnFirstLocalVideoFramePublished(RtcConnection connection, int elapsed)
        {
            OnFirstLocalVideoFramePublished_263e4cd_be_trigger = true;
            OnFirstLocalVideoFramePublished_263e4cd_connection = connection;
            OnFirstLocalVideoFramePublished_263e4cd_elapsed = elapsed;
        }

        public bool OnFirstLocalVideoFramePublishedPassed(RtcConnection connection, int elapsed)
        {
            if (OnFirstLocalVideoFramePublished_263e4cd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnFirstLocalVideoFramePublished_263e4cd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstLocalVideoFramePublished_263e4cd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstRemoteVideoDecoded_a68170a_be_trigger = false;
        public RtcConnection OnFirstRemoteVideoDecoded_a68170a_connection;
        public uint OnFirstRemoteVideoDecoded_a68170a_remoteUid;
        public int OnFirstRemoteVideoDecoded_a68170a_width;
        public int OnFirstRemoteVideoDecoded_a68170a_height;
        public int OnFirstRemoteVideoDecoded_a68170a_elapsed;

        public override void OnFirstRemoteVideoDecoded(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
        {
            OnFirstRemoteVideoDecoded_a68170a_be_trigger = true;
            OnFirstRemoteVideoDecoded_a68170a_connection = connection;
            OnFirstRemoteVideoDecoded_a68170a_remoteUid = remoteUid;
            OnFirstRemoteVideoDecoded_a68170a_width = width;
            OnFirstRemoteVideoDecoded_a68170a_height = height;
            OnFirstRemoteVideoDecoded_a68170a_elapsed = elapsed;
        }

        public bool OnFirstRemoteVideoDecodedPassed(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
        {
            if (OnFirstRemoteVideoDecoded_a68170a_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnFirstRemoteVideoDecoded_a68170a_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnFirstRemoteVideoDecoded_a68170a_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteVideoDecoded_a68170a_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteVideoDecoded_a68170a_height, height) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteVideoDecoded_a68170a_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnVideoSizeChanged_99bf45c_be_trigger = false;
        public RtcConnection OnVideoSizeChanged_99bf45c_connection;
        public VIDEO_SOURCE_TYPE OnVideoSizeChanged_99bf45c_sourceType;
        public uint OnVideoSizeChanged_99bf45c_uid;
        public int OnVideoSizeChanged_99bf45c_width;
        public int OnVideoSizeChanged_99bf45c_height;
        public int OnVideoSizeChanged_99bf45c_rotation;

        public override void OnVideoSizeChanged(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, uint uid, int width, int height, int rotation)
        {
            OnVideoSizeChanged_99bf45c_be_trigger = true;
            OnVideoSizeChanged_99bf45c_connection = connection;
            OnVideoSizeChanged_99bf45c_sourceType = sourceType;
            OnVideoSizeChanged_99bf45c_uid = uid;
            OnVideoSizeChanged_99bf45c_width = width;
            OnVideoSizeChanged_99bf45c_height = height;
            OnVideoSizeChanged_99bf45c_rotation = rotation;
        }

        public bool OnVideoSizeChangedPassed(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, uint uid, int width, int height, int rotation)
        {
            if (OnVideoSizeChanged_99bf45c_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnVideoSizeChanged_99bf45c_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<VIDEO_SOURCE_TYPE>(OnVideoSizeChanged_99bf45c_sourceType, sourceType) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnVideoSizeChanged_99bf45c_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnVideoSizeChanged_99bf45c_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnVideoSizeChanged_99bf45c_height, height) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnVideoSizeChanged_99bf45c_rotation, rotation) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalVideoStateChanged_b202b1b_be_trigger = false;
        public RtcConnection OnLocalVideoStateChanged_b202b1b_connection;
        public LOCAL_VIDEO_STREAM_STATE OnLocalVideoStateChanged_b202b1b_state;
        public LOCAL_VIDEO_STREAM_REASON OnLocalVideoStateChanged_b202b1b_reason;

        public override void OnLocalVideoStateChanged(RtcConnection connection, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_REASON reason)
        {
            OnLocalVideoStateChanged_b202b1b_be_trigger = true;
            OnLocalVideoStateChanged_b202b1b_connection = connection;
            OnLocalVideoStateChanged_b202b1b_state = state;
            OnLocalVideoStateChanged_b202b1b_reason = reason;
        }

        public bool OnLocalVideoStateChangedPassed(RtcConnection connection, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_REASON reason)
        {
            if (OnLocalVideoStateChanged_b202b1b_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnLocalVideoStateChanged_b202b1b_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<LOCAL_VIDEO_STREAM_STATE>(OnLocalVideoStateChanged_b202b1b_state, state) == false)
                return false;
            if (ParamsHelper.Compare<LOCAL_VIDEO_STREAM_REASON>(OnLocalVideoStateChanged_b202b1b_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteVideoStateChanged_a14e9d1_be_trigger = false;
        public RtcConnection OnRemoteVideoStateChanged_a14e9d1_connection;
        public uint OnRemoteVideoStateChanged_a14e9d1_remoteUid;
        public REMOTE_VIDEO_STATE OnRemoteVideoStateChanged_a14e9d1_state;
        public REMOTE_VIDEO_STATE_REASON OnRemoteVideoStateChanged_a14e9d1_reason;
        public int OnRemoteVideoStateChanged_a14e9d1_elapsed;

        public override void OnRemoteVideoStateChanged(RtcConnection connection, uint remoteUid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed)
        {
            OnRemoteVideoStateChanged_a14e9d1_be_trigger = true;
            OnRemoteVideoStateChanged_a14e9d1_connection = connection;
            OnRemoteVideoStateChanged_a14e9d1_remoteUid = remoteUid;
            OnRemoteVideoStateChanged_a14e9d1_state = state;
            OnRemoteVideoStateChanged_a14e9d1_reason = reason;
            OnRemoteVideoStateChanged_a14e9d1_elapsed = elapsed;
        }

        public bool OnRemoteVideoStateChangedPassed(RtcConnection connection, uint remoteUid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed)
        {
            if (OnRemoteVideoStateChanged_a14e9d1_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRemoteVideoStateChanged_a14e9d1_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnRemoteVideoStateChanged_a14e9d1_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<REMOTE_VIDEO_STATE>(OnRemoteVideoStateChanged_a14e9d1_state, state) == false)
                return false;
            if (ParamsHelper.Compare<REMOTE_VIDEO_STATE_REASON>(OnRemoteVideoStateChanged_a14e9d1_reason, reason) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnRemoteVideoStateChanged_a14e9d1_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstRemoteVideoFrame_a68170a_be_trigger = false;
        public RtcConnection OnFirstRemoteVideoFrame_a68170a_connection;
        public uint OnFirstRemoteVideoFrame_a68170a_remoteUid;
        public int OnFirstRemoteVideoFrame_a68170a_width;
        public int OnFirstRemoteVideoFrame_a68170a_height;
        public int OnFirstRemoteVideoFrame_a68170a_elapsed;

        public override void OnFirstRemoteVideoFrame(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
        {
            OnFirstRemoteVideoFrame_a68170a_be_trigger = true;
            OnFirstRemoteVideoFrame_a68170a_connection = connection;
            OnFirstRemoteVideoFrame_a68170a_remoteUid = remoteUid;
            OnFirstRemoteVideoFrame_a68170a_width = width;
            OnFirstRemoteVideoFrame_a68170a_height = height;
            OnFirstRemoteVideoFrame_a68170a_elapsed = elapsed;
        }

        public bool OnFirstRemoteVideoFramePassed(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
        {
            if (OnFirstRemoteVideoFrame_a68170a_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnFirstRemoteVideoFrame_a68170a_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnFirstRemoteVideoFrame_a68170a_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteVideoFrame_a68170a_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteVideoFrame_a68170a_height, height) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteVideoFrame_a68170a_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserJoined_c5499bd_be_trigger = false;
        public RtcConnection OnUserJoined_c5499bd_connection;
        public uint OnUserJoined_c5499bd_remoteUid;
        public int OnUserJoined_c5499bd_elapsed;

        public override void OnUserJoined(RtcConnection connection, uint remoteUid, int elapsed)
        {
            OnUserJoined_c5499bd_be_trigger = true;
            OnUserJoined_c5499bd_connection = connection;
            OnUserJoined_c5499bd_remoteUid = remoteUid;
            OnUserJoined_c5499bd_elapsed = elapsed;
        }

        public bool OnUserJoinedPassed(RtcConnection connection, uint remoteUid, int elapsed)
        {
            if (OnUserJoined_c5499bd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserJoined_c5499bd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserJoined_c5499bd_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnUserJoined_c5499bd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserOffline_0a32aac_be_trigger = false;
        public RtcConnection OnUserOffline_0a32aac_connection;
        public uint OnUserOffline_0a32aac_remoteUid;
        public USER_OFFLINE_REASON_TYPE OnUserOffline_0a32aac_reason;

        public override void OnUserOffline(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason)
        {
            OnUserOffline_0a32aac_be_trigger = true;
            OnUserOffline_0a32aac_connection = connection;
            OnUserOffline_0a32aac_remoteUid = remoteUid;
            OnUserOffline_0a32aac_reason = reason;
        }

        public bool OnUserOfflinePassed(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason)
        {
            if (OnUserOffline_0a32aac_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserOffline_0a32aac_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserOffline_0a32aac_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<USER_OFFLINE_REASON_TYPE>(OnUserOffline_0a32aac_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserMuteAudio_0aac2fe_be_trigger = false;
        public RtcConnection OnUserMuteAudio_0aac2fe_connection;
        public uint OnUserMuteAudio_0aac2fe_remoteUid;
        public bool OnUserMuteAudio_0aac2fe_muted;

        public override void OnUserMuteAudio(RtcConnection connection, uint remoteUid, bool muted)
        {
            OnUserMuteAudio_0aac2fe_be_trigger = true;
            OnUserMuteAudio_0aac2fe_connection = connection;
            OnUserMuteAudio_0aac2fe_remoteUid = remoteUid;
            OnUserMuteAudio_0aac2fe_muted = muted;
        }

        public bool OnUserMuteAudioPassed(RtcConnection connection, uint remoteUid, bool muted)
        {
            if (OnUserMuteAudio_0aac2fe_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserMuteAudio_0aac2fe_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserMuteAudio_0aac2fe_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnUserMuteAudio_0aac2fe_muted, muted) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserMuteVideo_0aac2fe_be_trigger = false;
        public RtcConnection OnUserMuteVideo_0aac2fe_connection;
        public uint OnUserMuteVideo_0aac2fe_remoteUid;
        public bool OnUserMuteVideo_0aac2fe_muted;

        public override void OnUserMuteVideo(RtcConnection connection, uint remoteUid, bool muted)
        {
            OnUserMuteVideo_0aac2fe_be_trigger = true;
            OnUserMuteVideo_0aac2fe_connection = connection;
            OnUserMuteVideo_0aac2fe_remoteUid = remoteUid;
            OnUserMuteVideo_0aac2fe_muted = muted;
        }

        public bool OnUserMuteVideoPassed(RtcConnection connection, uint remoteUid, bool muted)
        {
            if (OnUserMuteVideo_0aac2fe_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserMuteVideo_0aac2fe_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserMuteVideo_0aac2fe_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnUserMuteVideo_0aac2fe_muted, muted) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserEnableVideo_0aac2fe_be_trigger = false;
        public RtcConnection OnUserEnableVideo_0aac2fe_connection;
        public uint OnUserEnableVideo_0aac2fe_remoteUid;
        public bool OnUserEnableVideo_0aac2fe_enabled;

        public override void OnUserEnableVideo(RtcConnection connection, uint remoteUid, bool enabled)
        {
            OnUserEnableVideo_0aac2fe_be_trigger = true;
            OnUserEnableVideo_0aac2fe_connection = connection;
            OnUserEnableVideo_0aac2fe_remoteUid = remoteUid;
            OnUserEnableVideo_0aac2fe_enabled = enabled;
        }

        public bool OnUserEnableVideoPassed(RtcConnection connection, uint remoteUid, bool enabled)
        {
            if (OnUserEnableVideo_0aac2fe_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserEnableVideo_0aac2fe_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserEnableVideo_0aac2fe_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnUserEnableVideo_0aac2fe_enabled, enabled) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserEnableLocalVideo_0aac2fe_be_trigger = false;
        public RtcConnection OnUserEnableLocalVideo_0aac2fe_connection;
        public uint OnUserEnableLocalVideo_0aac2fe_remoteUid;
        public bool OnUserEnableLocalVideo_0aac2fe_enabled;

        public override void OnUserEnableLocalVideo(RtcConnection connection, uint remoteUid, bool enabled)
        {
            OnUserEnableLocalVideo_0aac2fe_be_trigger = true;
            OnUserEnableLocalVideo_0aac2fe_connection = connection;
            OnUserEnableLocalVideo_0aac2fe_remoteUid = remoteUid;
            OnUserEnableLocalVideo_0aac2fe_enabled = enabled;
        }

        public bool OnUserEnableLocalVideoPassed(RtcConnection connection, uint remoteUid, bool enabled)
        {
            if (OnUserEnableLocalVideo_0aac2fe_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserEnableLocalVideo_0aac2fe_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserEnableLocalVideo_0aac2fe_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnUserEnableLocalVideo_0aac2fe_enabled, enabled) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserStateChanged_65f95a7_be_trigger = false;
        public RtcConnection OnUserStateChanged_65f95a7_connection;
        public uint OnUserStateChanged_65f95a7_remoteUid;
        public uint OnUserStateChanged_65f95a7_state;

        public override void OnUserStateChanged(RtcConnection connection, uint remoteUid, uint state)
        {
            OnUserStateChanged_65f95a7_be_trigger = true;
            OnUserStateChanged_65f95a7_connection = connection;
            OnUserStateChanged_65f95a7_remoteUid = remoteUid;
            OnUserStateChanged_65f95a7_state = state;
        }

        public bool OnUserStateChangedPassed(RtcConnection connection, uint remoteUid, uint state)
        {
            if (OnUserStateChanged_65f95a7_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserStateChanged_65f95a7_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserStateChanged_65f95a7_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserStateChanged_65f95a7_state, state) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalAudioStats_5657f05_be_trigger = false;
        public RtcConnection OnLocalAudioStats_5657f05_connection;
        public LocalAudioStats OnLocalAudioStats_5657f05_stats;

        public override void OnLocalAudioStats(RtcConnection connection, LocalAudioStats stats)
        {
            OnLocalAudioStats_5657f05_be_trigger = true;
            OnLocalAudioStats_5657f05_connection = connection;
            OnLocalAudioStats_5657f05_stats = stats;
        }

        public bool OnLocalAudioStatsPassed(RtcConnection connection, LocalAudioStats stats)
        {
            if (OnLocalAudioStats_5657f05_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnLocalAudioStats_5657f05_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<LocalAudioStats>(OnLocalAudioStats_5657f05_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteAudioStats_ffbde06_be_trigger = false;
        public RtcConnection OnRemoteAudioStats_ffbde06_connection;
        public RemoteAudioStats OnRemoteAudioStats_ffbde06_stats;

        public override void OnRemoteAudioStats(RtcConnection connection, RemoteAudioStats stats)
        {
            OnRemoteAudioStats_ffbde06_be_trigger = true;
            OnRemoteAudioStats_ffbde06_connection = connection;
            OnRemoteAudioStats_ffbde06_stats = stats;
        }

        public bool OnRemoteAudioStatsPassed(RtcConnection connection, RemoteAudioStats stats)
        {
            if (OnRemoteAudioStats_ffbde06_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRemoteAudioStats_ffbde06_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<RemoteAudioStats>(OnRemoteAudioStats_ffbde06_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalVideoStats_3ac0eb4_be_trigger = false;
        public RtcConnection OnLocalVideoStats_3ac0eb4_connection;
        public LocalVideoStats OnLocalVideoStats_3ac0eb4_stats;

        public override void OnLocalVideoStats(RtcConnection connection, LocalVideoStats stats)
        {
            OnLocalVideoStats_3ac0eb4_be_trigger = true;
            OnLocalVideoStats_3ac0eb4_connection = connection;
            OnLocalVideoStats_3ac0eb4_stats = stats;
        }

        public bool OnLocalVideoStatsPassed(RtcConnection connection, LocalVideoStats stats)
        {
            if (OnLocalVideoStats_3ac0eb4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnLocalVideoStats_3ac0eb4_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<LocalVideoStats>(OnLocalVideoStats_3ac0eb4_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteVideoStats_2f43a70_be_trigger = false;
        public RtcConnection OnRemoteVideoStats_2f43a70_connection;
        public RemoteVideoStats OnRemoteVideoStats_2f43a70_stats;

        public override void OnRemoteVideoStats(RtcConnection connection, RemoteVideoStats stats)
        {
            OnRemoteVideoStats_2f43a70_be_trigger = true;
            OnRemoteVideoStats_2f43a70_connection = connection;
            OnRemoteVideoStats_2f43a70_stats = stats;
        }

        public bool OnRemoteVideoStatsPassed(RtcConnection connection, RemoteVideoStats stats)
        {
            if (OnRemoteVideoStats_2f43a70_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRemoteVideoStats_2f43a70_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<RemoteVideoStats>(OnRemoteVideoStats_2f43a70_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnConnectionLost_c81e1a4_be_trigger = false;
        public RtcConnection OnConnectionLost_c81e1a4_connection;

        public override void OnConnectionLost(RtcConnection connection)
        {
            OnConnectionLost_c81e1a4_be_trigger = true;
            OnConnectionLost_c81e1a4_connection = connection;
        }

        public bool OnConnectionLostPassed(RtcConnection connection)
        {
            if (OnConnectionLost_c81e1a4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnConnectionLost_c81e1a4_connection, connection) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnConnectionInterrupted_c81e1a4_be_trigger = false;
        public RtcConnection OnConnectionInterrupted_c81e1a4_connection;

        public override void OnConnectionInterrupted(RtcConnection connection)
        {
            OnConnectionInterrupted_c81e1a4_be_trigger = true;
            OnConnectionInterrupted_c81e1a4_connection = connection;
        }

        public bool OnConnectionInterruptedPassed(RtcConnection connection)
        {
            if (OnConnectionInterrupted_c81e1a4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnConnectionInterrupted_c81e1a4_connection, connection) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnConnectionBanned_c81e1a4_be_trigger = false;
        public RtcConnection OnConnectionBanned_c81e1a4_connection;

        public override void OnConnectionBanned(RtcConnection connection)
        {
            OnConnectionBanned_c81e1a4_be_trigger = true;
            OnConnectionBanned_c81e1a4_connection = connection;
        }

        public bool OnConnectionBannedPassed(RtcConnection connection)
        {
            if (OnConnectionBanned_c81e1a4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnConnectionBanned_c81e1a4_connection, connection) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnStreamMessage_99898cb_be_trigger = false;
        public RtcConnection OnStreamMessage_99898cb_connection;
        public uint OnStreamMessage_99898cb_remoteUid;
        public int OnStreamMessage_99898cb_streamId;
        public byte[] OnStreamMessage_99898cb_data;
        public ulong OnStreamMessage_99898cb_length;
        public ulong OnStreamMessage_99898cb_sentTs;

        public override void OnStreamMessage(RtcConnection connection, uint remoteUid, int streamId, byte[] data, ulong length, ulong sentTs)
        {
            OnStreamMessage_99898cb_be_trigger = true;
            OnStreamMessage_99898cb_connection = connection;
            OnStreamMessage_99898cb_remoteUid = remoteUid;
            OnStreamMessage_99898cb_streamId = streamId;
            OnStreamMessage_99898cb_data = data;
            OnStreamMessage_99898cb_length = length;
            OnStreamMessage_99898cb_sentTs = sentTs;
        }

        public bool OnStreamMessagePassed(RtcConnection connection, uint remoteUid, int streamId, byte[] data, ulong length, ulong sentTs)
        {
            if (OnStreamMessage_99898cb_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnStreamMessage_99898cb_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnStreamMessage_99898cb_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnStreamMessage_99898cb_streamId, streamId) == false)
                return false;
            if (ParamsHelper.Compare<byte[]>(OnStreamMessage_99898cb_data, data) == false)
                return false;
            if (ParamsHelper.Compare<ulong>(OnStreamMessage_99898cb_length, length) == false)
                return false;
            if (ParamsHelper.Compare<ulong>(OnStreamMessage_99898cb_sentTs, sentTs) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnStreamMessageError_fe302fc_be_trigger = false;
        public RtcConnection OnStreamMessageError_fe302fc_connection;
        public uint OnStreamMessageError_fe302fc_remoteUid;
        public int OnStreamMessageError_fe302fc_streamId;
        public int OnStreamMessageError_fe302fc_code;
        public int OnStreamMessageError_fe302fc_missed;
        public int OnStreamMessageError_fe302fc_cached;

        public override void OnStreamMessageError(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached)
        {
            OnStreamMessageError_fe302fc_be_trigger = true;
            OnStreamMessageError_fe302fc_connection = connection;
            OnStreamMessageError_fe302fc_remoteUid = remoteUid;
            OnStreamMessageError_fe302fc_streamId = streamId;
            OnStreamMessageError_fe302fc_code = code;
            OnStreamMessageError_fe302fc_missed = missed;
            OnStreamMessageError_fe302fc_cached = cached;
        }

        public bool OnStreamMessageErrorPassed(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached)
        {
            if (OnStreamMessageError_fe302fc_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnStreamMessageError_fe302fc_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnStreamMessageError_fe302fc_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnStreamMessageError_fe302fc_streamId, streamId) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnStreamMessageError_fe302fc_code, code) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnStreamMessageError_fe302fc_missed, missed) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnStreamMessageError_fe302fc_cached, cached) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRequestToken_c81e1a4_be_trigger = false;
        public RtcConnection OnRequestToken_c81e1a4_connection;

        public override void OnRequestToken(RtcConnection connection)
        {
            OnRequestToken_c81e1a4_be_trigger = true;
            OnRequestToken_c81e1a4_connection = connection;
        }

        public bool OnRequestTokenPassed(RtcConnection connection)
        {
            if (OnRequestToken_c81e1a4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRequestToken_c81e1a4_connection, connection) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLicenseValidationFailure_5dfd95e_be_trigger = false;
        public RtcConnection OnLicenseValidationFailure_5dfd95e_connection;
        public LICENSE_ERROR_TYPE OnLicenseValidationFailure_5dfd95e_reason;

        public override void OnLicenseValidationFailure(RtcConnection connection, LICENSE_ERROR_TYPE reason)
        {
            OnLicenseValidationFailure_5dfd95e_be_trigger = true;
            OnLicenseValidationFailure_5dfd95e_connection = connection;
            OnLicenseValidationFailure_5dfd95e_reason = reason;
        }

        public bool OnLicenseValidationFailurePassed(RtcConnection connection, LICENSE_ERROR_TYPE reason)
        {
            if (OnLicenseValidationFailure_5dfd95e_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnLicenseValidationFailure_5dfd95e_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<LICENSE_ERROR_TYPE>(OnLicenseValidationFailure_5dfd95e_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnTokenPrivilegeWillExpire_8225ea3_be_trigger = false;
        public RtcConnection OnTokenPrivilegeWillExpire_8225ea3_connection;
        public string OnTokenPrivilegeWillExpire_8225ea3_token;

        public override void OnTokenPrivilegeWillExpire(RtcConnection connection, string token)
        {
            OnTokenPrivilegeWillExpire_8225ea3_be_trigger = true;
            OnTokenPrivilegeWillExpire_8225ea3_connection = connection;
            OnTokenPrivilegeWillExpire_8225ea3_token = token;
        }

        public bool OnTokenPrivilegeWillExpirePassed(RtcConnection connection, string token)
        {
            if (OnTokenPrivilegeWillExpire_8225ea3_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnTokenPrivilegeWillExpire_8225ea3_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnTokenPrivilegeWillExpire_8225ea3_token, token) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstLocalAudioFramePublished_263e4cd_be_trigger = false;
        public RtcConnection OnFirstLocalAudioFramePublished_263e4cd_connection;
        public int OnFirstLocalAudioFramePublished_263e4cd_elapsed;

        public override void OnFirstLocalAudioFramePublished(RtcConnection connection, int elapsed)
        {
            OnFirstLocalAudioFramePublished_263e4cd_be_trigger = true;
            OnFirstLocalAudioFramePublished_263e4cd_connection = connection;
            OnFirstLocalAudioFramePublished_263e4cd_elapsed = elapsed;
        }

        public bool OnFirstLocalAudioFramePublishedPassed(RtcConnection connection, int elapsed)
        {
            if (OnFirstLocalAudioFramePublished_263e4cd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnFirstLocalAudioFramePublished_263e4cd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstLocalAudioFramePublished_263e4cd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstRemoteAudioFrame_c5499bd_be_trigger = false;
        public RtcConnection OnFirstRemoteAudioFrame_c5499bd_connection;
        public uint OnFirstRemoteAudioFrame_c5499bd_userId;
        public int OnFirstRemoteAudioFrame_c5499bd_elapsed;

        public override void OnFirstRemoteAudioFrame(RtcConnection connection, uint userId, int elapsed)
        {
            OnFirstRemoteAudioFrame_c5499bd_be_trigger = true;
            OnFirstRemoteAudioFrame_c5499bd_connection = connection;
            OnFirstRemoteAudioFrame_c5499bd_userId = userId;
            OnFirstRemoteAudioFrame_c5499bd_elapsed = elapsed;
        }

        public bool OnFirstRemoteAudioFramePassed(RtcConnection connection, uint userId, int elapsed)
        {
            if (OnFirstRemoteAudioFrame_c5499bd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnFirstRemoteAudioFrame_c5499bd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnFirstRemoteAudioFrame_c5499bd_userId, userId) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteAudioFrame_c5499bd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnFirstRemoteAudioDecoded_c5499bd_be_trigger = false;
        public RtcConnection OnFirstRemoteAudioDecoded_c5499bd_connection;
        public uint OnFirstRemoteAudioDecoded_c5499bd_uid;
        public int OnFirstRemoteAudioDecoded_c5499bd_elapsed;

        public override void OnFirstRemoteAudioDecoded(RtcConnection connection, uint uid, int elapsed)
        {
            OnFirstRemoteAudioDecoded_c5499bd_be_trigger = true;
            OnFirstRemoteAudioDecoded_c5499bd_connection = connection;
            OnFirstRemoteAudioDecoded_c5499bd_uid = uid;
            OnFirstRemoteAudioDecoded_c5499bd_elapsed = elapsed;
        }

        public bool OnFirstRemoteAudioDecodedPassed(RtcConnection connection, uint uid, int elapsed)
        {
            if (OnFirstRemoteAudioDecoded_c5499bd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnFirstRemoteAudioDecoded_c5499bd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnFirstRemoteAudioDecoded_c5499bd_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnFirstRemoteAudioDecoded_c5499bd_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnLocalAudioStateChanged_13b6c02_be_trigger = false;
        public RtcConnection OnLocalAudioStateChanged_13b6c02_connection;
        public LOCAL_AUDIO_STREAM_STATE OnLocalAudioStateChanged_13b6c02_state;
        public LOCAL_AUDIO_STREAM_REASON OnLocalAudioStateChanged_13b6c02_reason;

        public override void OnLocalAudioStateChanged(RtcConnection connection, LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_REASON reason)
        {
            OnLocalAudioStateChanged_13b6c02_be_trigger = true;
            OnLocalAudioStateChanged_13b6c02_connection = connection;
            OnLocalAudioStateChanged_13b6c02_state = state;
            OnLocalAudioStateChanged_13b6c02_reason = reason;
        }

        public bool OnLocalAudioStateChangedPassed(RtcConnection connection, LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_REASON reason)
        {
            if (OnLocalAudioStateChanged_13b6c02_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnLocalAudioStateChanged_13b6c02_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<LOCAL_AUDIO_STREAM_STATE>(OnLocalAudioStateChanged_13b6c02_state, state) == false)
                return false;
            if (ParamsHelper.Compare<LOCAL_AUDIO_STREAM_REASON>(OnLocalAudioStateChanged_13b6c02_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteAudioStateChanged_056772e_be_trigger = false;
        public RtcConnection OnRemoteAudioStateChanged_056772e_connection;
        public uint OnRemoteAudioStateChanged_056772e_remoteUid;
        public REMOTE_AUDIO_STATE OnRemoteAudioStateChanged_056772e_state;
        public REMOTE_AUDIO_STATE_REASON OnRemoteAudioStateChanged_056772e_reason;
        public int OnRemoteAudioStateChanged_056772e_elapsed;

        public override void OnRemoteAudioStateChanged(RtcConnection connection, uint remoteUid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed)
        {
            OnRemoteAudioStateChanged_056772e_be_trigger = true;
            OnRemoteAudioStateChanged_056772e_connection = connection;
            OnRemoteAudioStateChanged_056772e_remoteUid = remoteUid;
            OnRemoteAudioStateChanged_056772e_state = state;
            OnRemoteAudioStateChanged_056772e_reason = reason;
            OnRemoteAudioStateChanged_056772e_elapsed = elapsed;
        }

        public bool OnRemoteAudioStateChangedPassed(RtcConnection connection, uint remoteUid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed)
        {
            if (OnRemoteAudioStateChanged_056772e_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRemoteAudioStateChanged_056772e_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnRemoteAudioStateChanged_056772e_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<REMOTE_AUDIO_STATE>(OnRemoteAudioStateChanged_056772e_state, state) == false)
                return false;
            if (ParamsHelper.Compare<REMOTE_AUDIO_STATE_REASON>(OnRemoteAudioStateChanged_056772e_reason, reason) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnRemoteAudioStateChanged_056772e_elapsed, elapsed) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnActiveSpeaker_dd67adc_be_trigger = false;
        public RtcConnection OnActiveSpeaker_dd67adc_connection;
        public uint OnActiveSpeaker_dd67adc_uid;

        public override void OnActiveSpeaker(RtcConnection connection, uint uid)
        {
            OnActiveSpeaker_dd67adc_be_trigger = true;
            OnActiveSpeaker_dd67adc_connection = connection;
            OnActiveSpeaker_dd67adc_uid = uid;
        }

        public bool OnActiveSpeakerPassed(RtcConnection connection, uint uid)
        {
            if (OnActiveSpeaker_dd67adc_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnActiveSpeaker_dd67adc_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnActiveSpeaker_dd67adc_uid, uid) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnClientRoleChanged_2acaf10_be_trigger = false;
        public RtcConnection OnClientRoleChanged_2acaf10_connection;
        public CLIENT_ROLE_TYPE OnClientRoleChanged_2acaf10_oldRole;
        public CLIENT_ROLE_TYPE OnClientRoleChanged_2acaf10_newRole;
        public ClientRoleOptions OnClientRoleChanged_2acaf10_newRoleOptions;

        public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole, ClientRoleOptions newRoleOptions)
        {
            OnClientRoleChanged_2acaf10_be_trigger = true;
            OnClientRoleChanged_2acaf10_connection = connection;
            OnClientRoleChanged_2acaf10_oldRole = oldRole;
            OnClientRoleChanged_2acaf10_newRole = newRole;
            OnClientRoleChanged_2acaf10_newRoleOptions = newRoleOptions;
        }

        public bool OnClientRoleChangedPassed(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole, ClientRoleOptions newRoleOptions)
        {
            if (OnClientRoleChanged_2acaf10_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnClientRoleChanged_2acaf10_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<CLIENT_ROLE_TYPE>(OnClientRoleChanged_2acaf10_oldRole, oldRole) == false)
                return false;
            if (ParamsHelper.Compare<CLIENT_ROLE_TYPE>(OnClientRoleChanged_2acaf10_newRole, newRole) == false)
                return false;
            if (ParamsHelper.Compare<ClientRoleOptions>(OnClientRoleChanged_2acaf10_newRoleOptions, newRoleOptions) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnClientRoleChangeFailed_5a3af5b_be_trigger = false;
        public RtcConnection OnClientRoleChangeFailed_5a3af5b_connection;
        public CLIENT_ROLE_CHANGE_FAILED_REASON OnClientRoleChangeFailed_5a3af5b_reason;
        public CLIENT_ROLE_TYPE OnClientRoleChangeFailed_5a3af5b_currentRole;

        public override void OnClientRoleChangeFailed(RtcConnection connection, CLIENT_ROLE_CHANGE_FAILED_REASON reason, CLIENT_ROLE_TYPE currentRole)
        {
            OnClientRoleChangeFailed_5a3af5b_be_trigger = true;
            OnClientRoleChangeFailed_5a3af5b_connection = connection;
            OnClientRoleChangeFailed_5a3af5b_reason = reason;
            OnClientRoleChangeFailed_5a3af5b_currentRole = currentRole;
        }

        public bool OnClientRoleChangeFailedPassed(RtcConnection connection, CLIENT_ROLE_CHANGE_FAILED_REASON reason, CLIENT_ROLE_TYPE currentRole)
        {
            if (OnClientRoleChangeFailed_5a3af5b_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnClientRoleChangeFailed_5a3af5b_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<CLIENT_ROLE_CHANGE_FAILED_REASON>(OnClientRoleChangeFailed_5a3af5b_reason, reason) == false)
                return false;
            if (ParamsHelper.Compare<CLIENT_ROLE_TYPE>(OnClientRoleChangeFailed_5a3af5b_currentRole, currentRole) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteAudioTransportStats_527a345_be_trigger = false;
        public RtcConnection OnRemoteAudioTransportStats_527a345_connection;
        public uint OnRemoteAudioTransportStats_527a345_remoteUid;
        public ushort OnRemoteAudioTransportStats_527a345_delay;
        public ushort OnRemoteAudioTransportStats_527a345_lost;
        public ushort OnRemoteAudioTransportStats_527a345_rxKBitRate;

        public override void OnRemoteAudioTransportStats(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
        {
            OnRemoteAudioTransportStats_527a345_be_trigger = true;
            OnRemoteAudioTransportStats_527a345_connection = connection;
            OnRemoteAudioTransportStats_527a345_remoteUid = remoteUid;
            OnRemoteAudioTransportStats_527a345_delay = delay;
            OnRemoteAudioTransportStats_527a345_lost = lost;
            OnRemoteAudioTransportStats_527a345_rxKBitRate = rxKBitRate;
        }

        public bool OnRemoteAudioTransportStatsPassed(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
        {
            if (OnRemoteAudioTransportStats_527a345_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRemoteAudioTransportStats_527a345_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnRemoteAudioTransportStats_527a345_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnRemoteAudioTransportStats_527a345_delay, delay) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnRemoteAudioTransportStats_527a345_lost, lost) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnRemoteAudioTransportStats_527a345_rxKBitRate, rxKBitRate) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnRemoteVideoTransportStats_527a345_be_trigger = false;
        public RtcConnection OnRemoteVideoTransportStats_527a345_connection;
        public uint OnRemoteVideoTransportStats_527a345_remoteUid;
        public ushort OnRemoteVideoTransportStats_527a345_delay;
        public ushort OnRemoteVideoTransportStats_527a345_lost;
        public ushort OnRemoteVideoTransportStats_527a345_rxKBitRate;

        public override void OnRemoteVideoTransportStats(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
        {
            OnRemoteVideoTransportStats_527a345_be_trigger = true;
            OnRemoteVideoTransportStats_527a345_connection = connection;
            OnRemoteVideoTransportStats_527a345_remoteUid = remoteUid;
            OnRemoteVideoTransportStats_527a345_delay = delay;
            OnRemoteVideoTransportStats_527a345_lost = lost;
            OnRemoteVideoTransportStats_527a345_rxKBitRate = rxKBitRate;
        }

        public bool OnRemoteVideoTransportStatsPassed(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
        {
            if (OnRemoteVideoTransportStats_527a345_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnRemoteVideoTransportStats_527a345_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnRemoteVideoTransportStats_527a345_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnRemoteVideoTransportStats_527a345_delay, delay) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnRemoteVideoTransportStats_527a345_lost, lost) == false)
                return false;
            if (ParamsHelper.Compare<ushort>(OnRemoteVideoTransportStats_527a345_rxKBitRate, rxKBitRate) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnConnectionStateChanged_4075a9c_be_trigger = false;
        public RtcConnection OnConnectionStateChanged_4075a9c_connection;
        public CONNECTION_STATE_TYPE OnConnectionStateChanged_4075a9c_state;
        public CONNECTION_CHANGED_REASON_TYPE OnConnectionStateChanged_4075a9c_reason;

        public override void OnConnectionStateChanged(RtcConnection connection, CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason)
        {
            OnConnectionStateChanged_4075a9c_be_trigger = true;
            OnConnectionStateChanged_4075a9c_connection = connection;
            OnConnectionStateChanged_4075a9c_state = state;
            OnConnectionStateChanged_4075a9c_reason = reason;
        }

        public bool OnConnectionStateChangedPassed(RtcConnection connection, CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason)
        {
            if (OnConnectionStateChanged_4075a9c_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnConnectionStateChanged_4075a9c_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<CONNECTION_STATE_TYPE>(OnConnectionStateChanged_4075a9c_state, state) == false)
                return false;
            if (ParamsHelper.Compare<CONNECTION_CHANGED_REASON_TYPE>(OnConnectionStateChanged_4075a9c_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnWlAccMessage_2b9068e_be_trigger = false;
        public RtcConnection OnWlAccMessage_2b9068e_connection;
        public WLACC_MESSAGE_REASON OnWlAccMessage_2b9068e_reason;
        public WLACC_SUGGEST_ACTION OnWlAccMessage_2b9068e_action;
        public string OnWlAccMessage_2b9068e_wlAccMsg;

        public override void OnWlAccMessage(RtcConnection connection, WLACC_MESSAGE_REASON reason, WLACC_SUGGEST_ACTION action, string wlAccMsg)
        {
            OnWlAccMessage_2b9068e_be_trigger = true;
            OnWlAccMessage_2b9068e_connection = connection;
            OnWlAccMessage_2b9068e_reason = reason;
            OnWlAccMessage_2b9068e_action = action;
            OnWlAccMessage_2b9068e_wlAccMsg = wlAccMsg;
        }

        public bool OnWlAccMessagePassed(RtcConnection connection, WLACC_MESSAGE_REASON reason, WLACC_SUGGEST_ACTION action, string wlAccMsg)
        {
            if (OnWlAccMessage_2b9068e_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnWlAccMessage_2b9068e_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<WLACC_MESSAGE_REASON>(OnWlAccMessage_2b9068e_reason, reason) == false)
                return false;
            if (ParamsHelper.Compare<WLACC_SUGGEST_ACTION>(OnWlAccMessage_2b9068e_action, action) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnWlAccMessage_2b9068e_wlAccMsg, wlAccMsg) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnWlAccStats_b162607_be_trigger = false;
        public RtcConnection OnWlAccStats_b162607_connection;
        public WlAccStats OnWlAccStats_b162607_currentStats;
        public WlAccStats OnWlAccStats_b162607_averageStats;

        public override void OnWlAccStats(RtcConnection connection, WlAccStats currentStats, WlAccStats averageStats)
        {
            OnWlAccStats_b162607_be_trigger = true;
            OnWlAccStats_b162607_connection = connection;
            OnWlAccStats_b162607_currentStats = currentStats;
            OnWlAccStats_b162607_averageStats = averageStats;
        }

        public bool OnWlAccStatsPassed(RtcConnection connection, WlAccStats currentStats, WlAccStats averageStats)
        {
            if (OnWlAccStats_b162607_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnWlAccStats_b162607_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<WlAccStats>(OnWlAccStats_b162607_currentStats, currentStats) == false)
                return false;
            if (ParamsHelper.Compare<WlAccStats>(OnWlAccStats_b162607_averageStats, averageStats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnNetworkTypeChanged_388fd6f_be_trigger = false;
        public RtcConnection OnNetworkTypeChanged_388fd6f_connection;
        public NETWORK_TYPE OnNetworkTypeChanged_388fd6f_type;

        public override void OnNetworkTypeChanged(RtcConnection connection, NETWORK_TYPE type)
        {
            OnNetworkTypeChanged_388fd6f_be_trigger = true;
            OnNetworkTypeChanged_388fd6f_connection = connection;
            OnNetworkTypeChanged_388fd6f_type = type;
        }

        public bool OnNetworkTypeChangedPassed(RtcConnection connection, NETWORK_TYPE type)
        {
            if (OnNetworkTypeChanged_388fd6f_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnNetworkTypeChanged_388fd6f_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<NETWORK_TYPE>(OnNetworkTypeChanged_388fd6f_type, type) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnEncryptionError_e7a65fe_be_trigger = false;
        public RtcConnection OnEncryptionError_e7a65fe_connection;
        public ENCRYPTION_ERROR_TYPE OnEncryptionError_e7a65fe_errorType;

        public override void OnEncryptionError(RtcConnection connection, ENCRYPTION_ERROR_TYPE errorType)
        {
            OnEncryptionError_e7a65fe_be_trigger = true;
            OnEncryptionError_e7a65fe_connection = connection;
            OnEncryptionError_e7a65fe_errorType = errorType;
        }

        public bool OnEncryptionErrorPassed(RtcConnection connection, ENCRYPTION_ERROR_TYPE errorType)
        {
            if (OnEncryptionError_e7a65fe_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnEncryptionError_e7a65fe_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<ENCRYPTION_ERROR_TYPE>(OnEncryptionError_e7a65fe_errorType, errorType) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUploadLogResult_3115804_be_trigger = false;
        public RtcConnection OnUploadLogResult_3115804_connection;
        public string OnUploadLogResult_3115804_requestId;
        public bool OnUploadLogResult_3115804_success;
        public UPLOAD_ERROR_REASON OnUploadLogResult_3115804_reason;

        public override void OnUploadLogResult(RtcConnection connection, string requestId, bool success, UPLOAD_ERROR_REASON reason)
        {
            OnUploadLogResult_3115804_be_trigger = true;
            OnUploadLogResult_3115804_connection = connection;
            OnUploadLogResult_3115804_requestId = requestId;
            OnUploadLogResult_3115804_success = success;
            OnUploadLogResult_3115804_reason = reason;
        }

        public bool OnUploadLogResultPassed(RtcConnection connection, string requestId, bool success, UPLOAD_ERROR_REASON reason)
        {
            if (OnUploadLogResult_3115804_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUploadLogResult_3115804_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnUploadLogResult_3115804_requestId, requestId) == false)
                return false;
            if (ParamsHelper.Compare<bool>(OnUploadLogResult_3115804_success, success) == false)
                return false;
            if (ParamsHelper.Compare<UPLOAD_ERROR_REASON>(OnUploadLogResult_3115804_reason, reason) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnUserAccountUpdated_de1c015_be_trigger = false;
        public RtcConnection OnUserAccountUpdated_de1c015_connection;
        public uint OnUserAccountUpdated_de1c015_remoteUid;
        public string OnUserAccountUpdated_de1c015_remoteUserAccount;

        public override void OnUserAccountUpdated(RtcConnection connection, uint remoteUid, string remoteUserAccount)
        {
            OnUserAccountUpdated_de1c015_be_trigger = true;
            OnUserAccountUpdated_de1c015_connection = connection;
            OnUserAccountUpdated_de1c015_remoteUid = remoteUid;
            OnUserAccountUpdated_de1c015_remoteUserAccount = remoteUserAccount;
        }

        public bool OnUserAccountUpdatedPassed(RtcConnection connection, uint remoteUid, string remoteUserAccount)
        {
            if (OnUserAccountUpdated_de1c015_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnUserAccountUpdated_de1c015_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnUserAccountUpdated_de1c015_remoteUid, remoteUid) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnUserAccountUpdated_de1c015_remoteUserAccount, remoteUserAccount) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnSnapshotTaken_5a6a693_be_trigger = false;
        public RtcConnection OnSnapshotTaken_5a6a693_connection;
        public uint OnSnapshotTaken_5a6a693_uid;
        public string OnSnapshotTaken_5a6a693_filePath;
        public int OnSnapshotTaken_5a6a693_width;
        public int OnSnapshotTaken_5a6a693_height;
        public int OnSnapshotTaken_5a6a693_errCode;

        public override void OnSnapshotTaken(RtcConnection connection, uint uid, string filePath, int width, int height, int errCode)
        {
            OnSnapshotTaken_5a6a693_be_trigger = true;
            OnSnapshotTaken_5a6a693_connection = connection;
            OnSnapshotTaken_5a6a693_uid = uid;
            OnSnapshotTaken_5a6a693_filePath = filePath;
            OnSnapshotTaken_5a6a693_width = width;
            OnSnapshotTaken_5a6a693_height = height;
            OnSnapshotTaken_5a6a693_errCode = errCode;
        }

        public bool OnSnapshotTakenPassed(RtcConnection connection, uint uid, string filePath, int width, int height, int errCode)
        {
            if (OnSnapshotTaken_5a6a693_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnSnapshotTaken_5a6a693_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnSnapshotTaken_5a6a693_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnSnapshotTaken_5a6a693_filePath, filePath) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnSnapshotTaken_5a6a693_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnSnapshotTaken_5a6a693_height, height) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnSnapshotTaken_5a6a693_errCode, errCode) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnVideoRenderingTracingResult_813c0f4_be_trigger = false;
        public RtcConnection OnVideoRenderingTracingResult_813c0f4_connection;
        public uint OnVideoRenderingTracingResult_813c0f4_uid;
        public MEDIA_TRACE_EVENT OnVideoRenderingTracingResult_813c0f4_currentEvent;
        public VideoRenderingTracingInfo OnVideoRenderingTracingResult_813c0f4_tracingInfo;

        public override void OnVideoRenderingTracingResult(RtcConnection connection, uint uid, MEDIA_TRACE_EVENT currentEvent, VideoRenderingTracingInfo tracingInfo)
        {
            OnVideoRenderingTracingResult_813c0f4_be_trigger = true;
            OnVideoRenderingTracingResult_813c0f4_connection = connection;
            OnVideoRenderingTracingResult_813c0f4_uid = uid;
            OnVideoRenderingTracingResult_813c0f4_currentEvent = currentEvent;
            OnVideoRenderingTracingResult_813c0f4_tracingInfo = tracingInfo;
        }

        public bool OnVideoRenderingTracingResultPassed(RtcConnection connection, uint uid, MEDIA_TRACE_EVENT currentEvent, VideoRenderingTracingInfo tracingInfo)
        {
            if (OnVideoRenderingTracingResult_813c0f4_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnVideoRenderingTracingResult_813c0f4_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnVideoRenderingTracingResult_813c0f4_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<MEDIA_TRACE_EVENT>(OnVideoRenderingTracingResult_813c0f4_currentEvent, currentEvent) == false)
                return false;
            if (ParamsHelper.Compare<VideoRenderingTracingInfo>(OnVideoRenderingTracingResult_813c0f4_tracingInfo, tracingInfo) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnSetRtmFlagResult_263e4cd_be_trigger = false;
        public RtcConnection OnSetRtmFlagResult_263e4cd_connection;
        public int OnSetRtmFlagResult_263e4cd_code;

        public override void OnSetRtmFlagResult(RtcConnection connection, int code)
        {
            OnSetRtmFlagResult_263e4cd_be_trigger = true;
            OnSetRtmFlagResult_263e4cd_connection = connection;
            OnSetRtmFlagResult_263e4cd_code = code;
        }

        public bool OnSetRtmFlagResultPassed(RtcConnection connection, int code)
        {
            if (OnSetRtmFlagResult_263e4cd_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnSetRtmFlagResult_263e4cd_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnSetRtmFlagResult_263e4cd_code, code) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnTranscodedStreamLayoutInfo_48f6419_be_trigger = false;
        public RtcConnection OnTranscodedStreamLayoutInfo_48f6419_connection;
        public uint OnTranscodedStreamLayoutInfo_48f6419_uid;
        public int OnTranscodedStreamLayoutInfo_48f6419_width;
        public int OnTranscodedStreamLayoutInfo_48f6419_height;
        public int OnTranscodedStreamLayoutInfo_48f6419_layoutCount;
        public VideoLayout[] OnTranscodedStreamLayoutInfo_48f6419_layoutlist;

        public override void OnTranscodedStreamLayoutInfo(RtcConnection connection, uint uid, int width, int height, int layoutCount, VideoLayout[] layoutlist)
        {
            OnTranscodedStreamLayoutInfo_48f6419_be_trigger = true;
            OnTranscodedStreamLayoutInfo_48f6419_connection = connection;
            OnTranscodedStreamLayoutInfo_48f6419_uid = uid;
            OnTranscodedStreamLayoutInfo_48f6419_width = width;
            OnTranscodedStreamLayoutInfo_48f6419_height = height;
            OnTranscodedStreamLayoutInfo_48f6419_layoutCount = layoutCount;
            OnTranscodedStreamLayoutInfo_48f6419_layoutlist = layoutlist;
        }

        public bool OnTranscodedStreamLayoutInfoPassed(RtcConnection connection, uint uid, int width, int height, int layoutCount, VideoLayout[] layoutlist)
        {
            if (OnTranscodedStreamLayoutInfo_48f6419_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnTranscodedStreamLayoutInfo_48f6419_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnTranscodedStreamLayoutInfo_48f6419_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnTranscodedStreamLayoutInfo_48f6419_width, width) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnTranscodedStreamLayoutInfo_48f6419_height, height) == false)
                return false;
            if (ParamsHelper.Compare<int>(OnTranscodedStreamLayoutInfo_48f6419_layoutCount, layoutCount) == false)
                return false;
            if (ParamsHelper.Compare<VideoLayout[]>(OnTranscodedStreamLayoutInfo_48f6419_layoutlist, layoutlist) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnAudioMetadataReceived_0d4eb96_be_trigger = false;
        public RtcConnection OnAudioMetadataReceived_0d4eb96_connection;
        public uint OnAudioMetadataReceived_0d4eb96_uid;
        public byte[] OnAudioMetadataReceived_0d4eb96_metadata;
        public ulong OnAudioMetadataReceived_0d4eb96_length;

        public override void OnAudioMetadataReceived(RtcConnection connection, uint uid, byte[] metadata, ulong length)
        {
            OnAudioMetadataReceived_0d4eb96_be_trigger = true;
            OnAudioMetadataReceived_0d4eb96_connection = connection;
            OnAudioMetadataReceived_0d4eb96_uid = uid;
            OnAudioMetadataReceived_0d4eb96_metadata = metadata;
            OnAudioMetadataReceived_0d4eb96_length = length;
        }

        public bool OnAudioMetadataReceivedPassed(RtcConnection connection, uint uid, byte[] metadata, ulong length)
        {
            if (OnAudioMetadataReceived_0d4eb96_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<RtcConnection>(OnAudioMetadataReceived_0d4eb96_connection, connection) == false)
                return false;
            if (ParamsHelper.Compare<uint>(OnAudioMetadataReceived_0d4eb96_uid, uid) == false)
                return false;
            if (ParamsHelper.Compare<byte[]>(OnAudioMetadataReceived_0d4eb96_metadata, metadata) == false)
                return false;
            if (ParamsHelper.Compare<ulong>(OnAudioMetadataReceived_0d4eb96_length, length) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnDirectCdnStreamingStateChanged_40f1fa3_be_trigger = false;
        public DIRECT_CDN_STREAMING_STATE OnDirectCdnStreamingStateChanged_40f1fa3_state;
        public DIRECT_CDN_STREAMING_REASON OnDirectCdnStreamingStateChanged_40f1fa3_reason;
        public string OnDirectCdnStreamingStateChanged_40f1fa3_message;

        public override void OnDirectCdnStreamingStateChanged(DIRECT_CDN_STREAMING_STATE state, DIRECT_CDN_STREAMING_REASON reason, string message)
        {
            OnDirectCdnStreamingStateChanged_40f1fa3_be_trigger = true;
            OnDirectCdnStreamingStateChanged_40f1fa3_state = state;
            OnDirectCdnStreamingStateChanged_40f1fa3_reason = reason;
            OnDirectCdnStreamingStateChanged_40f1fa3_message = message;
        }

        public bool OnDirectCdnStreamingStateChangedPassed(DIRECT_CDN_STREAMING_STATE state, DIRECT_CDN_STREAMING_REASON reason, string message)
        {
            if (OnDirectCdnStreamingStateChanged_40f1fa3_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<DIRECT_CDN_STREAMING_STATE>(OnDirectCdnStreamingStateChanged_40f1fa3_state, state) == false)
                return false;
            if (ParamsHelper.Compare<DIRECT_CDN_STREAMING_REASON>(OnDirectCdnStreamingStateChanged_40f1fa3_reason, reason) == false)
                return false;
            if (ParamsHelper.Compare<string>(OnDirectCdnStreamingStateChanged_40f1fa3_message, message) == false)
                return false;

            return true;
        }

        /////////////////////////////////

        public bool OnDirectCdnStreamingStats_d50595f_be_trigger = false;
        public DirectCdnStreamingStats OnDirectCdnStreamingStats_d50595f_stats;

        public override void OnDirectCdnStreamingStats(DirectCdnStreamingStats stats)
        {
            OnDirectCdnStreamingStats_d50595f_be_trigger = true;
            OnDirectCdnStreamingStats_d50595f_stats = stats;
        }

        public bool OnDirectCdnStreamingStatsPassed(DirectCdnStreamingStats stats)
        {
            if (OnDirectCdnStreamingStats_d50595f_be_trigger == false)
                return false;

            if (ParamsHelper.Compare<DirectCdnStreamingStats>(OnDirectCdnStreamingStats_d50595f_stats, stats) == false)
                return false;

            return true;
        }

        /////////////////////////////////

    }
}