#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using NUnit.Framework;
using Agora.Rtc;
using System;
using view_t = System.UInt64;
namespace Agora.Rtc.Ut
{
    public partial class UnitTest_IRtcEngineEx
    {
        [Test]
        public void Test_JoinChannelEx_a3cd08c()
        {
            var token = ParamsHelper.CreateParam<string>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var options = ParamsHelper.CreateParam<ChannelMediaOptions>();

            var nRet = @interface.JoinChannelEx(token, connection, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_LeaveChannelEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.LeaveChannelEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_LeaveChannelEx_b03ee9a()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var options = ParamsHelper.CreateParam<LeaveChannelOptions>();

            var nRet = @interface.LeaveChannelEx(connection, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateChannelMediaOptionsEx_457bb35()
        {
            var options = ParamsHelper.CreateParam<ChannelMediaOptions>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.UpdateChannelMediaOptionsEx(options, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVideoEncoderConfigurationEx_4670c1e()
        {
            var config = ParamsHelper.CreateParam<VideoEncoderConfiguration>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetVideoEncoderConfigurationEx(config, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetupRemoteVideoEx_522a409()
        {
            var canvas = ParamsHelper.CreateParam<VideoCanvas>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetupRemoteVideoEx(canvas, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRemoteAudioStreamEx_6d93082()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteRemoteAudioStreamEx(uid, mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRemoteVideoStreamEx_6d93082()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteRemoteVideoStreamEx(uid, mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteVideoStreamTypeEx_01dc428()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var streamType = ParamsHelper.CreateParam<VIDEO_STREAM_TYPE>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetRemoteVideoStreamTypeEx(uid, streamType, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteLocalAudioStreamEx_3cf17a4()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteLocalAudioStreamEx(mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteLocalVideoStreamEx_3cf17a4()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteLocalVideoStreamEx(mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteAllRemoteAudioStreamsEx_3cf17a4()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteAllRemoteAudioStreamsEx(mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteAllRemoteVideoStreamsEx_3cf17a4()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteAllRemoteVideoStreamsEx(mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeAudioBlocklistEx_9f1e85c()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetSubscribeAudioBlocklistEx(uidList, uidNumber, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeAudioAllowlistEx_9f1e85c()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetSubscribeAudioAllowlistEx(uidList, uidNumber, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeVideoBlocklistEx_9f1e85c()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetSubscribeVideoBlocklistEx(uidList, uidNumber, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeVideoAllowlistEx_9f1e85c()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetSubscribeVideoAllowlistEx(uidList, uidNumber, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteVideoSubscriptionOptionsEx_3cd36bc()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var options = ParamsHelper.CreateParam<VideoSubscriptionOptions>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetRemoteVideoSubscriptionOptionsEx(uid, options, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteVoicePositionEx_fc0471c()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var pan = ParamsHelper.CreateParam<double>();

            var gain = ParamsHelper.CreateParam<double>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetRemoteVoicePositionEx(uid, pan, gain, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteUserSpatialAudioParamsEx_40ca9fb()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var @params = ParamsHelper.CreateParam<SpatialAudioParams>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetRemoteUserSpatialAudioParamsEx(uid, @params, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteRenderModeEx_a72fe4e()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var renderMode = ParamsHelper.CreateParam<RENDER_MODE_TYPE>();

            var mirrorMode = ParamsHelper.CreateParam<VIDEO_MIRROR_MODE_TYPE>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetRemoteRenderModeEx(uid, renderMode, mirrorMode, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableLoopbackRecordingEx_4f41542()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var enabled = ParamsHelper.CreateParam<bool>();

            var deviceName = ParamsHelper.CreateParam<string>();

            var nRet = @interface.EnableLoopbackRecordingEx(connection, enabled, deviceName);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustRecordingSignalVolumeEx_e84d10e()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.AdjustRecordingSignalVolumeEx(volume, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRecordingSignalEx_3cf17a4()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.MuteRecordingSignalEx(mute, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustUserPlaybackSignalVolumeEx_adbd29c()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var volume = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.AdjustUserPlaybackSignalVolumeEx(uid, volume, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetConnectionStateEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.GetConnectionStateEx(connection);
            Assert.AreEqual(CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED, nRet);
        }


        [Test]
        public void Test_EnableEncryptionEx_10cd872()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var enabled = ParamsHelper.CreateParam<bool>();

            var config = ParamsHelper.CreateParam<EncryptionConfig>();

            var nRet = @interface.EnableEncryptionEx(connection, enabled, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_CreateDataStreamEx_1767167()
        {
            var streamId = ParamsHelper.CreateParam<int>();

            var reliable = ParamsHelper.CreateParam<bool>();

            var ordered = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.CreateDataStreamEx(ref streamId, reliable, ordered, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_CreateDataStreamEx_9f641b6()
        {
            var streamId = ParamsHelper.CreateParam<int>();

            var config = ParamsHelper.CreateParam<DataStreamConfig>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.CreateDataStreamEx(ref streamId, config, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendStreamMessageEx_0c34857()
        {
            var streamId = ParamsHelper.CreateParam<int>();

            var data = ParamsHelper.CreateParam<byte[]>();

            var length = ParamsHelper.CreateParam<uint>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SendStreamMessageEx(streamId, data, length, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendRdtMessageEx_3a2998e()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var type = ParamsHelper.CreateParam<RdtStreamType>();

            var data = ParamsHelper.CreateParam<string>();

            var length = ParamsHelper.CreateParam<ulong>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SendRdtMessageEx(uid, type, data, length, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendMediaControlMessageEx_907822a()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var data = ParamsHelper.CreateParam<string>();

            var length = ParamsHelper.CreateParam<ulong>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SendMediaControlMessageEx(uid, data, length, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AddVideoWatermarkEx_ad7daa3()
        {
            var watermarkUrl = ParamsHelper.CreateParam<string>();

            var options = ParamsHelper.CreateParam<WatermarkOptions>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.AddVideoWatermarkEx(watermarkUrl, options, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ClearVideoWatermarkEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.ClearVideoWatermarkEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendCustomReportMessageEx_833b8a5()
        {
            var id = ParamsHelper.CreateParam<string>();

            var category = ParamsHelper.CreateParam<string>();

            var @event = ParamsHelper.CreateParam<string>();

            var label = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<int>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SendCustomReportMessageEx(id, category, @event, label, value, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableAudioVolumeIndicationEx_ac84f2a()
        {
            var interval = ParamsHelper.CreateParam<int>();

            var smooth = ParamsHelper.CreateParam<int>();

            var reportVad = ParamsHelper.CreateParam<bool>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.EnableAudioVolumeIndicationEx(interval, smooth, reportVad, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartRtmpStreamWithoutTranscodingEx_e405325()
        {
            var url = ParamsHelper.CreateParam<string>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.StartRtmpStreamWithoutTranscodingEx(url, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartRtmpStreamWithTranscodingEx_ab121b5()
        {
            var url = ParamsHelper.CreateParam<string>();

            var transcoding = ParamsHelper.CreateParam<LiveTranscoding>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.StartRtmpStreamWithTranscodingEx(url, transcoding, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateRtmpTranscodingEx_77f3ee8()
        {
            var transcoding = ParamsHelper.CreateParam<LiveTranscoding>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.UpdateRtmpTranscodingEx(transcoding, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopRtmpStreamEx_e405325()
        {
            var url = ParamsHelper.CreateParam<string>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.StopRtmpStreamEx(url, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartOrUpdateChannelMediaRelayEx_4ad39a8()
        {
            var configuration = ParamsHelper.CreateParam<ChannelMediaRelayConfiguration>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.StartOrUpdateChannelMediaRelayEx(configuration, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopChannelMediaRelayEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.StopChannelMediaRelayEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PauseAllChannelMediaRelayEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.PauseAllChannelMediaRelayEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ResumeAllChannelMediaRelayEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.ResumeAllChannelMediaRelayEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetUserInfoByUserAccountEx_ca39cc6()
        {
            var userAccount = ParamsHelper.CreateParam<string>();

            var userInfo = ParamsHelper.CreateParam<UserInfo>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.GetUserInfoByUserAccountEx(userAccount, ref userInfo, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetUserInfoByUidEx_1e78da1()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var userInfo = ParamsHelper.CreateParam<UserInfo>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.GetUserInfoByUidEx(uid, ref userInfo, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableDualStreamModeEx_4b18f41()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var streamConfig = ParamsHelper.CreateParam<SimulcastStreamConfig>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.EnableDualStreamModeEx(enabled, streamConfig, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetDualStreamModeEx_622d0f3()
        {
            var mode = ParamsHelper.CreateParam<SIMULCAST_STREAM_MODE>();

            var streamConfig = ParamsHelper.CreateParam<SimulcastStreamConfig>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetDualStreamModeEx(mode, streamConfig, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetHighPriorityUserListEx_8736b5c()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNum = ParamsHelper.CreateParam<int>();

            var option = ParamsHelper.CreateParam<STREAM_FALLBACK_OPTIONS>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.SetHighPriorityUserListEx(uidList, uidNum, option, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_TakeSnapshotEx_de1c015()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var uid = ParamsHelper.CreateParam<uint>();

            var filePath = ParamsHelper.CreateParam<string>();

            var nRet = @interface.TakeSnapshotEx(connection, uid, filePath);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableContentInspectEx_c4e7f69()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var config = ParamsHelper.CreateParam<ContentInspectConfig>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.EnableContentInspectEx(enabled, config, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartMediaRenderingTracingEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.StartMediaRenderingTracingEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetParametersEx_8225ea3()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var parameters = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SetParametersEx(connection, parameters);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetCallIdEx_b13f7c4()
        {
            var callId = ParamsHelper.CreateParam<string>();

            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.GetCallIdEx(ref callId, connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendAudioMetadataEx_e2bf1c4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var metadata = ParamsHelper.CreateParam<byte[]>();

            var length = ParamsHelper.CreateParam<ulong>();

            var nRet = @interface.SendAudioMetadataEx(connection, metadata, length);
            Assert.AreEqual(0, nRet);
        }


    }
}