#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using NUnit.Framework;
using Agora.Rtc;
using System;
using view_t = System.UInt64;
namespace Agora.Rtc.Ut
{
    public partial class UnitTest_ILocalSpatialAudioEngine
    {
        [Test]
        public void Test_Initialize_cf94fbf()
        {
            var nRet = @interface.Initialize();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ClearRemotePositionsEx_c81e1a4()
        {
            var connection = ParamsHelper.CreateParam<RtcConnection>();

            var nRet = @interface.ClearRemotePositionsEx(connection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetParameters_3a2037f()
        {
            var @params = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SetParameters(@params);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteLocalAudioStream_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteLocalAudioStream(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteAllRemoteAudioStreams_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteAllRemoteAudioStreams(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRemoteAudioStream_dbdc15a()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteRemoteAudioStream(uid, mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ClearRemotePositions()
        {
            var nRet = @interface.ClearRemotePositions();
            Assert.AreEqual(0, nRet);
        }


    }
}