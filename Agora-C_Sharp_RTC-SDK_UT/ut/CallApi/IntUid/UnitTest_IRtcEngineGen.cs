#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using NUnit.Framework;
using Agora.Rtc;
using System;
using view_t = System.UInt64;
namespace Agora.Rtc.Ut
{
    public partial class UnitTest_IRtcEngine
    {
        [Test]
        public void Test_Initialize_0320339()
        {
            var context = ParamsHelper.CreateParam<RtcEngineContext>();

            var nRet = @interface.Initialize(context);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetVersion_915cb25()
        {
            var build = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetVersion(ref build);
            Assert.AreEqual("", nRet);
        }


        [Test]
        public void Test_GetErrorDescription_46f8ab7()
        {
            var code = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetErrorDescription(code);
            Assert.AreEqual("fatal", nRet);
        }


        [Test]
        public void Test_QueryCodecCapability_ddf4f31()
        {
            var codecInfo = ParamsHelper.CreateParam<CodecCapInfo[]>();

            var size = ParamsHelper.CreateParam<int>();

            var nRet = @interface.QueryCodecCapability(ref codecInfo, ref size);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_QueryDeviceScore()
        {
            var nRet = @interface.QueryDeviceScore();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PreloadChannel_a0779eb()
        {
            var token = ParamsHelper.CreateParam<string>();

            var channelId = ParamsHelper.CreateParam<string>();

            var uid = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.PreloadChannel(token, channelId, uid);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PreloadChannelWithUserAccount_0e4f59e()
        {
            var token = ParamsHelper.CreateParam<string>();

            var channelId = ParamsHelper.CreateParam<string>();

            var userAccount = ParamsHelper.CreateParam<string>();

            var nRet = @interface.PreloadChannelWithUserAccount(token, channelId, userAccount);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdatePreloadChannelToken_3a2037f()
        {
            var token = ParamsHelper.CreateParam<string>();

            var nRet = @interface.UpdatePreloadChannelToken(token);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_JoinChannel_f097389()
        {
            var token = ParamsHelper.CreateParam<string>();

            var channelId = ParamsHelper.CreateParam<string>();

            var info = ParamsHelper.CreateParam<string>();

            var uid = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.JoinChannel(token, channelId, info, uid);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_JoinChannel_cdbb747()
        {
            var token = ParamsHelper.CreateParam<string>();

            var channelId = ParamsHelper.CreateParam<string>();

            var uid = ParamsHelper.CreateParam<uint>();

            var options = ParamsHelper.CreateParam<ChannelMediaOptions>();

            var nRet = @interface.JoinChannel(token, channelId, uid, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateChannelMediaOptions_7bfc1d7()
        {
            var options = ParamsHelper.CreateParam<ChannelMediaOptions>();

            var nRet = @interface.UpdateChannelMediaOptions(options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_LeaveChannel()
        {
            var nRet = @interface.LeaveChannel();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_LeaveChannel_2c0e3aa()
        {
            var options = ParamsHelper.CreateParam<LeaveChannelOptions>();

            var nRet = @interface.LeaveChannel(options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RenewToken_3a2037f()
        {
            var token = ParamsHelper.CreateParam<string>();

            var nRet = @interface.RenewToken(token);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetChannelProfile_a78fa4f()
        {
            var profile = ParamsHelper.CreateParam<CHANNEL_PROFILE_TYPE>();

            var nRet = @interface.SetChannelProfile(profile);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetClientRole_3426fa6()
        {
            var role = ParamsHelper.CreateParam<CLIENT_ROLE_TYPE>();

            var nRet = @interface.SetClientRole(role);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetClientRole_b46cc48()
        {
            var role = ParamsHelper.CreateParam<CLIENT_ROLE_TYPE>();

            var options = ParamsHelper.CreateParam<ClientRoleOptions>();

            var nRet = @interface.SetClientRole(role, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartEchoTest_16140d7()
        {
            var config = ParamsHelper.CreateParam<EchoTestConfiguration>();

            var nRet = @interface.StartEchoTest(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopEchoTest()
        {
            var nRet = @interface.StopEchoTest();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableMultiCamera_bffe023()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var config = ParamsHelper.CreateParam<CameraCapturerConfiguration>();

            var nRet = @interface.EnableMultiCamera(enabled, config);
            Assert.AreEqual(-4, nRet);
        }


        [Test]
        public void Test_EnableVideo()
        {
            var nRet = @interface.EnableVideo();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_DisableVideo()
        {
            var nRet = @interface.DisableVideo();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartPreview()
        {
            var nRet = @interface.StartPreview();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartPreview_4fd718e()
        {
            var sourceType = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var nRet = @interface.StartPreview(sourceType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopPreview()
        {
            var nRet = @interface.StopPreview();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopPreview_4fd718e()
        {
            var sourceType = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var nRet = @interface.StopPreview(sourceType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartLastmileProbeTest_c4de423()
        {
            var config = ParamsHelper.CreateParam<LastmileProbeConfig>();

            var nRet = @interface.StartLastmileProbeTest(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopLastmileProbeTest()
        {
            var nRet = @interface.StopLastmileProbeTest();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVideoEncoderConfiguration_89677d8()
        {
            var config = ParamsHelper.CreateParam<VideoEncoderConfiguration>();

            var nRet = @interface.SetVideoEncoderConfiguration(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetBeautyEffectOptions_e7635d1()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<BeautyOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetBeautyEffectOptions(enabled, options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetFaceShapeBeautyOptions_a862ce7()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<FaceShapeBeautyOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetFaceShapeBeautyOptions(enabled, options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetFaceShapeAreaOptions_2e242a3()
        {
            var options = ParamsHelper.CreateParam<FaceShapeAreaOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetFaceShapeAreaOptions(options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetFaceShapeBeautyOptions_8382895()
        {
            var options = ParamsHelper.CreateParam<FaceShapeBeautyOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.GetFaceShapeBeautyOptions(ref options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetFaceShapeAreaOptions_0783e2c()
        {
            var shapeArea = ParamsHelper.CreateParam<FACE_SHAPE_AREA>();

            var options = ParamsHelper.CreateParam<FaceShapeAreaOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.GetFaceShapeAreaOptions(shapeArea, ref options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetFilterEffectOptions_53b4be3()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<FilterEffectOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetFilterEffectOptions(enabled, options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLowlightEnhanceOptions_4f9f013()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<LowlightEnhanceOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetLowlightEnhanceOptions(enabled, options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVideoDenoiserOptions_4e9fccc()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<VideoDenoiserOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetVideoDenoiserOptions(enabled, options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetColorEnhanceOptions_ecae2b3()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<ColorEnhanceOptions>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetColorEnhanceOptions(enabled, options, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableVirtualBackground_6dd8ee4()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var backgroundSource = ParamsHelper.CreateParam<VirtualBackgroundSource>();

            var segproperty = ParamsHelper.CreateParam<SegmentationProperty>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.EnableVirtualBackground(enabled, backgroundSource, segproperty, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetupRemoteVideo_acc9c38()
        {
            var canvas = ParamsHelper.CreateParam<VideoCanvas>();

            var nRet = @interface.SetupRemoteVideo(canvas);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetupLocalVideo_acc9c38()
        {
            var canvas = ParamsHelper.CreateParam<VideoCanvas>();

            var nRet = @interface.SetupLocalVideo(canvas);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVideoScenario_c02cd1c()
        {
            var scenarioType = ParamsHelper.CreateParam<VIDEO_APPLICATION_SCENARIO_TYPE>();

            var nRet = @interface.SetVideoScenario(scenarioType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVideoQoEPreference_c4a3d9f()
        {
            var qoePreference = ParamsHelper.CreateParam<VIDEO_QOE_PREFERENCE_TYPE>();

            var nRet = @interface.SetVideoQoEPreference(qoePreference);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableAudio()
        {
            var nRet = @interface.EnableAudio();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_DisableAudio()
        {
            var nRet = @interface.DisableAudio();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioProfile_d944543()
        {
            var profile = ParamsHelper.CreateParam<AUDIO_PROFILE_TYPE>();

            var scenario = ParamsHelper.CreateParam<AUDIO_SCENARIO_TYPE>();

            var nRet = @interface.SetAudioProfile(profile, scenario);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioProfile_ac39c15()
        {
            var profile = ParamsHelper.CreateParam<AUDIO_PROFILE_TYPE>();

            var nRet = @interface.SetAudioProfile(profile);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioScenario_c36f5c1()
        {
            var scenario = ParamsHelper.CreateParam<AUDIO_SCENARIO_TYPE>();

            var nRet = @interface.SetAudioScenario(scenario);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableLocalAudio_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableLocalAudio(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteLocalAudioStream_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteLocalAudioStream(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteAllRemoteAudioStreams_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteAllRemoteAudioStreams(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRemoteAudioStream_dbdc15a()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteRemoteAudioStream(uid, mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteLocalVideoStream_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteLocalVideoStream(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableLocalVideo_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableLocalVideo(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteAllRemoteVideoStreams_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteAllRemoteVideoStreams(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteDefaultVideoStreamType_5a94eb0()
        {
            var streamType = ParamsHelper.CreateParam<VIDEO_STREAM_TYPE>();

            var nRet = @interface.SetRemoteDefaultVideoStreamType(streamType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRemoteVideoStream_dbdc15a()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteRemoteVideoStream(uid, mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteVideoStreamType_9e6406e()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var streamType = ParamsHelper.CreateParam<VIDEO_STREAM_TYPE>();

            var nRet = @interface.SetRemoteVideoStreamType(uid, streamType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteVideoSubscriptionOptions_0b6b258()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var options = ParamsHelper.CreateParam<VideoSubscriptionOptions>();

            var nRet = @interface.SetRemoteVideoSubscriptionOptions(uid, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeAudioBlocklist_2d31fd5()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetSubscribeAudioBlocklist(uidList, uidNumber);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeAudioAllowlist_2d31fd5()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetSubscribeAudioAllowlist(uidList, uidNumber);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeVideoBlocklist_2d31fd5()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetSubscribeVideoBlocklist(uidList, uidNumber);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSubscribeVideoAllowlist_2d31fd5()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNumber = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetSubscribeVideoAllowlist(uidList, uidNumber);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableAudioVolumeIndication_39794a0()
        {
            var interval = ParamsHelper.CreateParam<int>();

            var smooth = ParamsHelper.CreateParam<int>();

            var reportVad = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableAudioVolumeIndication(interval, smooth, reportVad);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartAudioRecording_6161339()
        {
            var filePath = ParamsHelper.CreateParam<string>();

            var quality = ParamsHelper.CreateParam<AUDIO_RECORDING_QUALITY_TYPE>();

            var nRet = @interface.StartAudioRecording(filePath, quality);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartAudioRecording_410d265()
        {
            var filePath = ParamsHelper.CreateParam<string>();

            var sampleRate = ParamsHelper.CreateParam<int>();

            var quality = ParamsHelper.CreateParam<AUDIO_RECORDING_QUALITY_TYPE>();

            var nRet = @interface.StartAudioRecording(filePath, sampleRate, quality);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartAudioRecording_e32bb3b()
        {
            var config = ParamsHelper.CreateParam<AudioRecordingConfiguration>();

            var nRet = @interface.StartAudioRecording(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RegisterAudioEncodedFrameObserver_ed4a177()
        {
            var config = ParamsHelper.CreateParam<AudioEncodedFrameObserverConfig>();

            var observer = ParamsHelper.CreateParam<IAudioEncodedFrameObserver>();

            var nRet = @interface.RegisterAudioEncodedFrameObserver(config, observer);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopAudioRecording()
        {
            var nRet = @interface.StopAudioRecording();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartAudioMixing_f3db86c()
        {
            var filePath = ParamsHelper.CreateParam<string>();

            var loopback = ParamsHelper.CreateParam<bool>();

            var cycle = ParamsHelper.CreateParam<int>();

            var nRet = @interface.StartAudioMixing(filePath, loopback, cycle);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartAudioMixing_1ee1b1e()
        {
            var filePath = ParamsHelper.CreateParam<string>();

            var loopback = ParamsHelper.CreateParam<bool>();

            var cycle = ParamsHelper.CreateParam<int>();

            var startPos = ParamsHelper.CreateParam<int>();

            var nRet = @interface.StartAudioMixing(filePath, loopback, cycle, startPos);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopAudioMixing()
        {
            var nRet = @interface.StopAudioMixing();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PauseAudioMixing()
        {
            var nRet = @interface.PauseAudioMixing();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ResumeAudioMixing()
        {
            var nRet = @interface.ResumeAudioMixing();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SelectAudioTrack_46f8ab7()
        {
            var index = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SelectAudioTrack(index);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetAudioTrackCount()
        {
            var nRet = @interface.GetAudioTrackCount();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustAudioMixingVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustAudioMixingVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustAudioMixingPublishVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustAudioMixingPublishVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetAudioMixingPublishVolume()
        {
            var nRet = @interface.GetAudioMixingPublishVolume();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustAudioMixingPlayoutVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustAudioMixingPlayoutVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetAudioMixingPlayoutVolume()
        {
            var nRet = @interface.GetAudioMixingPlayoutVolume();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetAudioMixingDuration()
        {
            var nRet = @interface.GetAudioMixingDuration();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetAudioMixingCurrentPosition()
        {
            var nRet = @interface.GetAudioMixingCurrentPosition();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioMixingPosition_46f8ab7()
        {
            var pos = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetAudioMixingPosition(pos);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioMixingDualMonoMode_38a5515()
        {
            var mode = ParamsHelper.CreateParam<AUDIO_MIXING_DUAL_MONO_MODE>();

            var nRet = @interface.SetAudioMixingDualMonoMode(mode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioMixingPitch_46f8ab7()
        {
            var pitch = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetAudioMixingPitch(pitch);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioMixingPlaybackSpeed_46f8ab7()
        {
            var speed = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetAudioMixingPlaybackSpeed(speed);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetEffectsVolume()
        {
            var nRet = @interface.GetEffectsVolume();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetEffectsVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetEffectsVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PreloadEffect_282ba8c()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var filePath = ParamsHelper.CreateParam<string>();

            var startPos = ParamsHelper.CreateParam<int>();

            var nRet = @interface.PreloadEffect(soundId, filePath, startPos);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PlayEffect_531a783()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var filePath = ParamsHelper.CreateParam<string>();

            var loopCount = ParamsHelper.CreateParam<int>();

            var pitch = ParamsHelper.CreateParam<double>();

            var pan = ParamsHelper.CreateParam<double>();

            var gain = ParamsHelper.CreateParam<int>();

            var publish = ParamsHelper.CreateParam<bool>();

            var startPos = ParamsHelper.CreateParam<int>();

            var nRet = @interface.PlayEffect(soundId, filePath, loopCount, pitch, pan, gain, publish, startPos);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PlayAllEffects_20d7df2()
        {
            var loopCount = ParamsHelper.CreateParam<int>();

            var pitch = ParamsHelper.CreateParam<double>();

            var pan = ParamsHelper.CreateParam<double>();

            var gain = ParamsHelper.CreateParam<int>();

            var publish = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.PlayAllEffects(loopCount, pitch, pan, gain, publish);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetVolumeOfEffect_46f8ab7()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetVolumeOfEffect(soundId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVolumeOfEffect_4e92b3c()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetVolumeOfEffect(soundId, volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PauseEffect_46f8ab7()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var nRet = @interface.PauseEffect(soundId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PauseAllEffects()
        {
            var nRet = @interface.PauseAllEffects();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ResumeEffect_46f8ab7()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var nRet = @interface.ResumeEffect(soundId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ResumeAllEffects()
        {
            var nRet = @interface.ResumeAllEffects();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopEffect_46f8ab7()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var nRet = @interface.StopEffect(soundId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopAllEffects()
        {
            var nRet = @interface.StopAllEffects();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UnloadEffect_46f8ab7()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var nRet = @interface.UnloadEffect(soundId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UnloadAllEffects()
        {
            var nRet = @interface.UnloadAllEffects();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetEffectDuration_3a2037f()
        {
            var filePath = ParamsHelper.CreateParam<string>();

            var nRet = @interface.GetEffectDuration(filePath);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetEffectPosition_4e92b3c()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var pos = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetEffectPosition(soundId, pos);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetEffectCurrentPosition_46f8ab7()
        {
            var soundId = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetEffectCurrentPosition(soundId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableSoundPositionIndication_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableSoundPositionIndication(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteVoicePosition_250b42d()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var pan = ParamsHelper.CreateParam<double>();

            var gain = ParamsHelper.CreateParam<double>();

            var nRet = @interface.SetRemoteVoicePosition(uid, pan, gain);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableSpatialAudio_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableSpatialAudio(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteUserSpatialAudioParams_65a7855()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var @params = ParamsHelper.CreateParam<SpatialAudioParams>();

            var nRet = @interface.SetRemoteUserSpatialAudioParams(uid, @params);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVoiceBeautifierPreset_4dd6319()
        {
            var preset = ParamsHelper.CreateParam<VOICE_BEAUTIFIER_PRESET>();

            var nRet = @interface.SetVoiceBeautifierPreset(preset);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioEffectPreset_92ea92c()
        {
            var preset = ParamsHelper.CreateParam<AUDIO_EFFECT_PRESET>();

            var nRet = @interface.SetAudioEffectPreset(preset);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVoiceConversionPreset_d14ee73()
        {
            var preset = ParamsHelper.CreateParam<VOICE_CONVERSION_PRESET>();

            var nRet = @interface.SetVoiceConversionPreset(preset);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioEffectParameters_73bc670()
        {
            var preset = ParamsHelper.CreateParam<AUDIO_EFFECT_PRESET>();

            var param1 = ParamsHelper.CreateParam<int>();

            var param2 = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetAudioEffectParameters(preset, param1, param2);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVoiceBeautifierParameters_f3cf745()
        {
            var preset = ParamsHelper.CreateParam<VOICE_BEAUTIFIER_PRESET>();

            var param1 = ParamsHelper.CreateParam<int>();

            var param2 = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetVoiceBeautifierParameters(preset, param1, param2);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetVoiceConversionParameters_2f5022e()
        {
            var preset = ParamsHelper.CreateParam<VOICE_CONVERSION_PRESET>();

            var param1 = ParamsHelper.CreateParam<int>();

            var param2 = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetVoiceConversionParameters(preset, param1, param2);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalVoicePitch_bdb36bb()
        {
            var pitch = ParamsHelper.CreateParam<double>();

            var nRet = @interface.SetLocalVoicePitch(pitch);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalVoiceFormant_bdb36bb()
        {
            var formantRatio = ParamsHelper.CreateParam<double>();

            var nRet = @interface.SetLocalVoiceFormant(formantRatio);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalVoiceEqualization_d14012c()
        {
            var bandFrequency = ParamsHelper.CreateParam<AUDIO_EQUALIZATION_BAND_FREQUENCY>();

            var bandGain = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetLocalVoiceEqualization(bandFrequency, bandGain);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalVoiceReverb_29c2013()
        {
            var reverbKey = ParamsHelper.CreateParam<AUDIO_REVERB_TYPE>();

            var value = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetLocalVoiceReverb(reverbKey, value);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetHeadphoneEQPreset_b679644()
        {
            var preset = ParamsHelper.CreateParam<HEADPHONE_EQUALIZER_PRESET>();

            var nRet = @interface.SetHeadphoneEQPreset(preset);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetHeadphoneEQParameters_4e92b3c()
        {
            var lowGain = ParamsHelper.CreateParam<int>();

            var highGain = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetHeadphoneEQParameters(lowGain, highGain);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableVoiceAITuner_28f5d5b()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var type = ParamsHelper.CreateParam<VOICE_AI_TUNER_TYPE>();

            var nRet = @interface.EnableVoiceAITuner(enabled, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLogFilter_2626ac7()
        {
            var filter = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.SetLogFilter(filter);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLogLevel_f125d83()
        {
            var level = ParamsHelper.CreateParam<LOG_LEVEL>();

            var nRet = @interface.SetLogLevel(level);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLogFileSize_2626ac7()
        {
            var fileSizeInKBytes = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.SetLogFileSize(fileSizeInKBytes);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UploadLogFile_66d4ecd()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var nRet = @interface.UploadLogFile(ref requestId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_WriteLog_62889f6()
        {
            var level = ParamsHelper.CreateParam<LOG_LEVEL>();

            var fmt = ParamsHelper.CreateParam<string>();

            var nRet = @interface.WriteLog(level, fmt);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalRenderMode_cfb201b()
        {
            var renderMode = ParamsHelper.CreateParam<RENDER_MODE_TYPE>();

            var mirrorMode = ParamsHelper.CreateParam<VIDEO_MIRROR_MODE_TYPE>();

            var nRet = @interface.SetLocalRenderMode(renderMode, mirrorMode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteRenderMode_6771ce0()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var renderMode = ParamsHelper.CreateParam<RENDER_MODE_TYPE>();

            var mirrorMode = ParamsHelper.CreateParam<VIDEO_MIRROR_MODE_TYPE>();

            var nRet = @interface.SetRemoteRenderMode(uid, renderMode, mirrorMode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalRenderTargetFps_2ad83d8()
        {
            var sourceType = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var targetFps = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetLocalRenderTargetFps(sourceType, targetFps);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteRenderTargetFps_46f8ab7()
        {
            var targetFps = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetRemoteRenderTargetFps(targetFps);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalRenderMode_bedb5ae()
        {
            var renderMode = ParamsHelper.CreateParam<RENDER_MODE_TYPE>();

            var nRet = @interface.SetLocalRenderMode(renderMode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalVideoMirrorMode_b8a6c69()
        {
            var mirrorMode = ParamsHelper.CreateParam<VIDEO_MIRROR_MODE_TYPE>();

            var nRet = @interface.SetLocalVideoMirrorMode(mirrorMode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableDualStreamMode_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableDualStreamMode(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableDualStreamMode_9822d8a()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var streamConfig = ParamsHelper.CreateParam<SimulcastStreamConfig>();

            var nRet = @interface.EnableDualStreamMode(enabled, streamConfig);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetDualStreamMode_3a7f662()
        {
            var mode = ParamsHelper.CreateParam<SIMULCAST_STREAM_MODE>();

            var nRet = @interface.SetDualStreamMode(mode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetSimulcastConfig_3dcdfd7()
        {
            var simulcastConfig = ParamsHelper.CreateParam<SimulcastConfig>();

            var nRet = @interface.SetSimulcastConfig(simulcastConfig);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetDualStreamMode_b3a4f6c()
        {
            var mode = ParamsHelper.CreateParam<SIMULCAST_STREAM_MODE>();

            var streamConfig = ParamsHelper.CreateParam<SimulcastStreamConfig>();

            var nRet = @interface.SetDualStreamMode(mode, streamConfig);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableCustomAudioLocalPlayback_9566341()
        {
            var trackId = ParamsHelper.CreateParam<uint>();

            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableCustomAudioLocalPlayback(trackId, enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRecordingAudioFrameParameters_bd46d1d()
        {
            var sampleRate = ParamsHelper.CreateParam<int>();

            var channel = ParamsHelper.CreateParam<int>();

            var mode = ParamsHelper.CreateParam<RAW_AUDIO_FRAME_OP_MODE_TYPE>();

            var samplesPerCall = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetRecordingAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetPlaybackAudioFrameParameters_bd46d1d()
        {
            var sampleRate = ParamsHelper.CreateParam<int>();

            var channel = ParamsHelper.CreateParam<int>();

            var mode = ParamsHelper.CreateParam<RAW_AUDIO_FRAME_OP_MODE_TYPE>();

            var samplesPerCall = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetPlaybackAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetMixedAudioFrameParameters_ee7e270()
        {
            var sampleRate = ParamsHelper.CreateParam<int>();

            var channel = ParamsHelper.CreateParam<int>();

            var samplesPerCall = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetMixedAudioFrameParameters(sampleRate, channel, samplesPerCall);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetEarMonitoringAudioFrameParameters_bd46d1d()
        {
            var sampleRate = ParamsHelper.CreateParam<int>();

            var channel = ParamsHelper.CreateParam<int>();

            var mode = ParamsHelper.CreateParam<RAW_AUDIO_FRAME_OP_MODE_TYPE>();

            var samplesPerCall = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetEarMonitoringAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetPlaybackAudioFrameBeforeMixingParameters_4e92b3c()
        {
            var sampleRate = ParamsHelper.CreateParam<int>();

            var channel = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetPlaybackAudioFrameBeforeMixingParameters(sampleRate, channel);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableAudioSpectrumMonitor_46f8ab7()
        {
            var intervalInMS = ParamsHelper.CreateParam<int>();

            var nRet = @interface.EnableAudioSpectrumMonitor(intervalInMS);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_DisableAudioSpectrumMonitor()
        {
            var nRet = @interface.DisableAudioSpectrumMonitor();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RegisterAudioSpectrumObserver_0406ea7()
        {
            var observer = ParamsHelper.CreateParam<IAudioSpectrumObserver>();

            var nRet = @interface.RegisterAudioSpectrumObserver(observer);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UnregisterAudioSpectrumObserver_0406ea7()
        {
            var nRet = @interface.UnregisterAudioSpectrumObserver();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustRecordingSignalVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustRecordingSignalVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_MuteRecordingSignal_5039d15()
        {
            var mute = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.MuteRecordingSignal(mute);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustPlaybackSignalVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustPlaybackSignalVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustUserPlaybackSignalVolume_88641bf()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustUserPlaybackSignalVolume(uid, volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalPublishFallbackOption_c29b788()
        {
            var option = ParamsHelper.CreateParam<STREAM_FALLBACK_OPTIONS>();

            var nRet = @interface.SetLocalPublishFallbackOption(option);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetRemoteSubscribeFallbackOption_c29b788()
        {
            var option = ParamsHelper.CreateParam<STREAM_FALLBACK_OPTIONS>();

            var nRet = @interface.SetRemoteSubscribeFallbackOption(option);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetHighPriorityUserList_ab88726()
        {
            var uidList = ParamsHelper.CreateParam<uint[]>();

            var uidNum = ParamsHelper.CreateParam<int>();

            var option = ParamsHelper.CreateParam<STREAM_FALLBACK_OPTIONS>();

            var nRet = @interface.SetHighPriorityUserList(uidList, uidNum, option);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableExtension_d8b3874()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var extensionInfo = ParamsHelper.CreateParam<ExtensionInfo>();

            var enable = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableExtension(provider, extension, extensionInfo, enable);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExtensionProperty_f746b51()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var extensionInfo = ParamsHelper.CreateParam<ExtensionInfo>();

            var key = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SetExtensionProperty(provider, extension, extensionInfo, key, value);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetExtensionProperty_18768d4()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var extensionInfo = ParamsHelper.CreateParam<ExtensionInfo>();

            var key = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<string>();

            var buf_len = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetExtensionProperty(provider, extension, extensionInfo, key, ref value, buf_len);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableLoopbackRecording_0b8eb79()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var deviceName = ParamsHelper.CreateParam<string>();

            var nRet = @interface.EnableLoopbackRecording(enabled, deviceName);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustLoopbackSignalVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustLoopbackSignalVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetLoopbackRecordingVolume()
        {
            var nRet = @interface.GetLoopbackRecordingVolume();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableInEarMonitoring_077cf5f()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var includeAudioFilters = ParamsHelper.CreateParam<int>();

            var nRet = @interface.EnableInEarMonitoring(enabled, includeAudioFilters);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetInEarMonitoringVolume_46f8ab7()
        {
            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetInEarMonitoringVolume(volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_LoadExtensionProvider_7a174df()
        {
            var path = ParamsHelper.CreateParam<string>();

            var unload_after_use = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.LoadExtensionProvider(path, unload_after_use);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExtensionProviderProperty_0e4f59e()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var key = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SetExtensionProviderProperty(provider, key, value);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RegisterExtension_fd62af4()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.RegisterExtension(provider, extension, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableExtension_0b60a2c()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var enable = ParamsHelper.CreateParam<bool>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.EnableExtension(provider, extension, enable, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExtensionProperty_520ac55()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var key = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<string>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.SetExtensionProperty(provider, extension, key, value, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetExtensionProperty_38c9723()
        {
            var provider = ParamsHelper.CreateParam<string>();

            var extension = ParamsHelper.CreateParam<string>();

            var key = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<string>();

            var buf_len = ParamsHelper.CreateParam<int>();

            var type = ParamsHelper.CreateParam<MEDIA_SOURCE_TYPE>();

            var nRet = @interface.GetExtensionProperty(provider, extension, key, ref value, buf_len, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCameraCapturerConfiguration_afa93b3()
        {
            var config = ParamsHelper.CreateParam<CameraCapturerConfiguration>();

            var nRet = @interface.SetCameraCapturerConfiguration(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_CreateCustomVideoTrack()
        {
            var nRet = @interface.CreateCustomVideoTrack();
            Assert.AreEqual(true, nRet > 0);
        }


        [Test]
        public void Test_CreateCustomEncodedVideoTrack_0e9dc99()
        {
            var sender_option = ParamsHelper.CreateParam<SenderOptions>();

            var nRet = @interface.CreateCustomEncodedVideoTrack(sender_option);
            Assert.AreEqual(true, nRet > 0);
        }


        [Test]
        public void Test_DestroyCustomVideoTrack_3019423()
        {
            var video_track_id = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.DestroyCustomVideoTrack(video_track_id);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_DestroyCustomEncodedVideoTrack_3019423()
        {
            var video_track_id = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.DestroyCustomEncodedVideoTrack(video_track_id);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SwitchCamera()
        {
            var nRet = @interface.SwitchCamera();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsCameraZoomSupported()
        {
            var nRet = @interface.IsCameraZoomSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_IsCameraFaceDetectSupported()
        {
            var nRet = @interface.IsCameraFaceDetectSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_IsCameraTorchSupported()
        {
            var nRet = @interface.IsCameraTorchSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_IsCameraFocusSupported()
        {
            var nRet = @interface.IsCameraFocusSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_IsCameraAutoFocusFaceModeSupported()
        {
            var nRet = @interface.IsCameraAutoFocusFaceModeSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_SetCameraZoomFactor_685e803()
        {
            var factor = ParamsHelper.CreateParam<float>();

            var nRet = @interface.SetCameraZoomFactor(factor);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableFaceDetection_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableFaceDetection(enabled);
            Assert.AreEqual(-4, nRet);
        }


        [Test]
        public void Test_GetCameraMaxZoomFactor()
        {
            var nRet = @interface.GetCameraMaxZoomFactor();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCameraFocusPositionInPreview_f282d50()
        {
            var positionX = ParamsHelper.CreateParam<float>();

            var positionY = ParamsHelper.CreateParam<float>();

            var nRet = @interface.SetCameraFocusPositionInPreview(positionX, positionY);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCameraTorchOn_5039d15()
        {
            var isOn = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.SetCameraTorchOn(isOn);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCameraAutoFocusFaceModeEnabled_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.SetCameraAutoFocusFaceModeEnabled(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsCameraExposurePositionSupported()
        {
            var nRet = @interface.IsCameraExposurePositionSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_SetCameraExposurePosition_f282d50()
        {
            var positionXinView = ParamsHelper.CreateParam<float>();

            var positionYinView = ParamsHelper.CreateParam<float>();

            var nRet = @interface.SetCameraExposurePosition(positionXinView, positionYinView);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsCameraExposureSupported()
        {
            var nRet = @interface.IsCameraExposureSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_SetCameraExposureFactor_685e803()
        {
            var factor = ParamsHelper.CreateParam<float>();

            var nRet = @interface.SetCameraExposureFactor(factor);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsCameraAutoExposureFaceModeSupported()
        {
            var nRet = @interface.IsCameraAutoExposureFaceModeSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_SetCameraAutoExposureFaceModeEnabled_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.SetCameraAutoExposureFaceModeEnabled(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCameraStabilizationMode_701b981()
        {
            var mode = ParamsHelper.CreateParam<CAMERA_STABILIZATION_MODE>();

            var nRet = @interface.SetCameraStabilizationMode(mode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetDefaultAudioRouteToSpeakerphone_5039d15()
        {
            var defaultToSpeaker = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.SetDefaultAudioRouteToSpeakerphone(defaultToSpeaker);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetEnableSpeakerphone_5039d15()
        {
            var speakerOn = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.SetEnableSpeakerphone(speakerOn);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsSpeakerphoneEnabled()
        {
            var nRet = @interface.IsSpeakerphoneEnabled();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_SetRouteInCommunicationMode_46f8ab7()
        {
            var route = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetRouteInCommunicationMode(route);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsCameraCenterStageSupported()
        {
            var nRet = @interface.IsCameraCenterStageSupported();
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_EnableCameraCenterStage_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableCameraCenterStage(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAudioSessionOperationRestriction_c492897()
        {
            var restriction = ParamsHelper.CreateParam<AUDIO_SESSION_OPERATION_RESTRICTION>();

            var nRet = @interface.SetAudioSessionOperationRestriction(restriction);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartScreenCaptureByDisplayId_ce89867()
        {
            var displayId = ParamsHelper.CreateParam<uint>();

            var regionRect = ParamsHelper.CreateParam<Rectangle>();

            var captureParams = ParamsHelper.CreateParam<ScreenCaptureParameters>();

            var nRet = @interface.StartScreenCaptureByDisplayId(displayId, regionRect, captureParams);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartScreenCaptureByScreenRect_e286286()
        {
            var screenRect = ParamsHelper.CreateParam<Rectangle>();

            var regionRect = ParamsHelper.CreateParam<Rectangle>();

            var captureParams = ParamsHelper.CreateParam<ScreenCaptureParameters>();

            var nRet = @interface.StartScreenCaptureByScreenRect(screenRect, regionRect, captureParams);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetAudioDeviceInfo_505aa0c()
        {
            var deviceInfo = ParamsHelper.CreateParam<DeviceInfoMobile>();

            var nRet = @interface.GetAudioDeviceInfo(ref deviceInfo);
            Assert.AreEqual(-4, nRet);
        }


        [Test]
        public void Test_StartScreenCaptureByWindowId_ce89867()
        {
            var windowId = ParamsHelper.CreateParam<long>();

            var regionRect = ParamsHelper.CreateParam<Rectangle>();

            var captureParams = ParamsHelper.CreateParam<ScreenCaptureParameters>();

            var nRet = @interface.StartScreenCaptureByWindowId(windowId, regionRect, captureParams);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetScreenCaptureContentHint_8ad2c79()
        {
            var contentHint = ParamsHelper.CreateParam<VIDEO_CONTENT_HINT>();

            var nRet = @interface.SetScreenCaptureContentHint(contentHint);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateScreenCaptureRegion_6b327a8()
        {
            var regionRect = ParamsHelper.CreateParam<Rectangle>();

            var nRet = @interface.UpdateScreenCaptureRegion(regionRect);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateScreenCaptureParameters_a2eef93()
        {
            var captureParams = ParamsHelper.CreateParam<ScreenCaptureParameters>();

            var nRet = @interface.UpdateScreenCaptureParameters(captureParams);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateScreenCapture_270da41()
        {
            var captureParams = ParamsHelper.CreateParam<ScreenCaptureParameters2>();

            var nRet = @interface.UpdateScreenCapture(captureParams);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_QueryScreenCaptureCapability()
        {
            var nRet = @interface.QueryScreenCaptureCapability();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_QueryCameraFocalLengthCapability_2dee6af()
        {
            var focalLengthInfos = ParamsHelper.CreateParam<FocalLengthInfo[]>();

            var size = ParamsHelper.CreateParam<int>();

            var nRet = @interface.QueryCameraFocalLengthCapability(ref focalLengthInfos, ref size);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExternalMediaProjection_f337cbf()
        {
            var mediaProjection = ParamsHelper.CreateParam<IntPtr>();

            var nRet = @interface.SetExternalMediaProjection(mediaProjection);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetScreenCaptureScenario_13de7b4()
        {
            var screenScenario = ParamsHelper.CreateParam<SCREEN_SCENARIO_TYPE>();

            var nRet = @interface.SetScreenCaptureScenario(screenScenario);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopScreenCapture()
        {
            var nRet = @interface.StopScreenCapture();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetCallId_66d4ecd()
        {
            var callId = ParamsHelper.CreateParam<string>();

            var nRet = @interface.GetCallId(ref callId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_Rate_f1a0070()
        {
            var callId = ParamsHelper.CreateParam<string>();

            var rating = ParamsHelper.CreateParam<int>();

            var description = ParamsHelper.CreateParam<string>();

            var nRet = @interface.Rate(callId, rating, description);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_Complain_ccad422()
        {
            var callId = ParamsHelper.CreateParam<string>();

            var description = ParamsHelper.CreateParam<string>();

            var nRet = @interface.Complain(callId, description);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartRtmpStreamWithoutTranscoding_3a2037f()
        {
            var url = ParamsHelper.CreateParam<string>();

            var nRet = @interface.StartRtmpStreamWithoutTranscoding(url);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartRtmpStreamWithTranscoding_f76aa1a()
        {
            var url = ParamsHelper.CreateParam<string>();

            var transcoding = ParamsHelper.CreateParam<LiveTranscoding>();

            var nRet = @interface.StartRtmpStreamWithTranscoding(url, transcoding);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateRtmpTranscoding_91368d4()
        {
            var transcoding = ParamsHelper.CreateParam<LiveTranscoding>();

            var nRet = @interface.UpdateRtmpTranscoding(transcoding);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartLocalVideoTranscoder_90f9e33()
        {
            var config = ParamsHelper.CreateParam<LocalTranscoderConfiguration>();

            var nRet = @interface.StartLocalVideoTranscoder(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateLocalTranscoderConfiguration_90f9e33()
        {
            var config = ParamsHelper.CreateParam<LocalTranscoderConfiguration>();

            var nRet = @interface.UpdateLocalTranscoderConfiguration(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopRtmpStream_3a2037f()
        {
            var url = ParamsHelper.CreateParam<string>();

            var nRet = @interface.StopRtmpStream(url);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopLocalVideoTranscoder()
        {
            var nRet = @interface.StopLocalVideoTranscoder();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartLocalAudioMixer_a7ff78e()
        {
            var config = ParamsHelper.CreateParam<LocalAudioMixerConfiguration>();

            var nRet = @interface.StartLocalAudioMixer(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateLocalAudioMixerConfiguration_a7ff78e()
        {
            var config = ParamsHelper.CreateParam<LocalAudioMixerConfiguration>();

            var nRet = @interface.UpdateLocalAudioMixerConfiguration(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopLocalAudioMixer()
        {
            var nRet = @interface.StopLocalAudioMixer();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartCameraCapture_f3692cc()
        {
            var sourceType = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var config = ParamsHelper.CreateParam<CameraCapturerConfiguration>();

            var nRet = @interface.StartCameraCapture(sourceType, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopCameraCapture_4fd718e()
        {
            var sourceType = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var nRet = @interface.StopCameraCapture(sourceType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCameraDeviceOrientation_025aae8()
        {
            var type = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var orientation = ParamsHelper.CreateParam<VIDEO_ORIENTATION>();

            var nRet = @interface.SetCameraDeviceOrientation(type, orientation);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetScreenCaptureOrientation_025aae8()
        {
            var type = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var orientation = ParamsHelper.CreateParam<VIDEO_ORIENTATION>();

            var nRet = @interface.SetScreenCaptureOrientation(type, orientation);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopScreenCapture_4fd718e()
        {
            var sourceType = ParamsHelper.CreateParam<VIDEO_SOURCE_TYPE>();

            var nRet = @interface.StopScreenCapture(sourceType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetConnectionState()
        {
            var nRet = @interface.GetConnectionState();
            Assert.AreEqual(CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED, nRet);
        }


        [Test]
        public void Test_SetRemoteUserPriority_f34115b()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var userPriority = ParamsHelper.CreateParam<PRIORITY_TYPE>();

            var nRet = @interface.SetRemoteUserPriority(uid, userPriority);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableEncryption_421c27b()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var config = ParamsHelper.CreateParam<EncryptionConfig>();

            var nRet = @interface.EnableEncryption(enabled, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_CreateDataStream_b897a63()
        {
            var streamId = ParamsHelper.CreateParam<int>();

            var reliable = ParamsHelper.CreateParam<bool>();

            var ordered = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.CreateDataStream(ref streamId, reliable, ordered);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_CreateDataStream_5862815()
        {
            var streamId = ParamsHelper.CreateParam<int>();

            var config = ParamsHelper.CreateParam<DataStreamConfig>();

            var nRet = @interface.CreateDataStream(ref streamId, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendStreamMessage_8715a45()
        {
            var streamId = ParamsHelper.CreateParam<int>();

            var data = ParamsHelper.CreateParam<byte[]>();

            var length = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.SendStreamMessage(streamId, data, length);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AddVideoWatermark_eaef16d()
        {
            var watermark = ParamsHelper.CreateParam<RtcImage>();

            var nRet = @interface.AddVideoWatermark(watermark);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AddVideoWatermark_7480410()
        {
            var watermarkUrl = ParamsHelper.CreateParam<string>();

            var options = ParamsHelper.CreateParam<WatermarkOptions>();

            var nRet = @interface.AddVideoWatermark(watermarkUrl, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ClearVideoWatermarks()
        {
            var nRet = @interface.ClearVideoWatermarks();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PauseAudio()
        {
            var nRet = @interface.PauseAudio();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ResumeAudio()
        {
            var nRet = @interface.ResumeAudio();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableWebSdkInteroperability_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableWebSdkInteroperability(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SendCustomReportMessage_56d6589()
        {
            var id = ParamsHelper.CreateParam<string>();

            var category = ParamsHelper.CreateParam<string>();

            var @event = ParamsHelper.CreateParam<string>();

            var label = ParamsHelper.CreateParam<string>();

            var value = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SendCustomReportMessage(id, category, @event, label, value);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RegisterMediaMetadataObserver_8701fec()
        {
            var observer = ParamsHelper.CreateParam<IMetadataObserver>();

            var type = ParamsHelper.CreateParam<METADATA_TYPE>();

            var nRet = @interface.RegisterMediaMetadataObserver(observer, type);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UnregisterMediaMetadataObserver_8701fec()
        {
            var nRet = @interface.UnregisterMediaMetadataObserver();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartAudioFrameDump_aad7331()
        {
            var channel_id = ParamsHelper.CreateParam<string>();

            var uid = ParamsHelper.CreateParam<uint>();

            var location = ParamsHelper.CreateParam<string>();

            var uuid = ParamsHelper.CreateParam<string>();

            var passwd = ParamsHelper.CreateParam<string>();

            var duration_ms = ParamsHelper.CreateParam<long>();

            var auto_upload = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.StartAudioFrameDump(channel_id, uid, location, uuid, passwd, duration_ms, auto_upload);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopAudioFrameDump_a4c9af4()
        {
            var channel_id = ParamsHelper.CreateParam<string>();

            var uid = ParamsHelper.CreateParam<uint>();

            var location = ParamsHelper.CreateParam<string>();

            var nRet = @interface.StopAudioFrameDump(channel_id, uid, location);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAINSMode_4df3049()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var mode = ParamsHelper.CreateParam<AUDIO_AINS_MODE>();

            var nRet = @interface.SetAINSMode(enabled, mode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RegisterLocalUserAccount_ccad422()
        {
            var appId = ParamsHelper.CreateParam<string>();

            var userAccount = ParamsHelper.CreateParam<string>();

            var nRet = @interface.RegisterLocalUserAccount(appId, userAccount);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_JoinChannelWithUserAccount_0e4f59e()
        {
            var token = ParamsHelper.CreateParam<string>();

            var channelId = ParamsHelper.CreateParam<string>();

            var userAccount = ParamsHelper.CreateParam<string>();

            var nRet = @interface.JoinChannelWithUserAccount(token, channelId, userAccount);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_JoinChannelWithUserAccount_4685af9()
        {
            var token = ParamsHelper.CreateParam<string>();

            var channelId = ParamsHelper.CreateParam<string>();

            var userAccount = ParamsHelper.CreateParam<string>();

            var options = ParamsHelper.CreateParam<ChannelMediaOptions>();

            var nRet = @interface.JoinChannelWithUserAccount(token, channelId, userAccount, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetUserInfoByUserAccount_c6a8f08()
        {
            var userAccount = ParamsHelper.CreateParam<string>();

            var userInfo = ParamsHelper.CreateParam<UserInfo>();

            var nRet = @interface.GetUserInfoByUserAccount(userAccount, ref userInfo);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetUserInfoByUid_6b7aee8()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var userInfo = ParamsHelper.CreateParam<UserInfo>();

            var nRet = @interface.GetUserInfoByUid(uid, ref userInfo);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartOrUpdateChannelMediaRelay_e68f0a4()
        {
            var configuration = ParamsHelper.CreateParam<ChannelMediaRelayConfiguration>();

            var nRet = @interface.StartOrUpdateChannelMediaRelay(configuration);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopChannelMediaRelay()
        {
            var nRet = @interface.StopChannelMediaRelay();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PauseAllChannelMediaRelay()
        {
            var nRet = @interface.PauseAllChannelMediaRelay();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ResumeAllChannelMediaRelay()
        {
            var nRet = @interface.ResumeAllChannelMediaRelay();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetDirectCdnStreamingAudioConfiguration_ac39c15()
        {
            var profile = ParamsHelper.CreateParam<AUDIO_PROFILE_TYPE>();

            var nRet = @interface.SetDirectCdnStreamingAudioConfiguration(profile);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetDirectCdnStreamingVideoConfiguration_89677d8()
        {
            var config = ParamsHelper.CreateParam<VideoEncoderConfiguration>();

            var nRet = @interface.SetDirectCdnStreamingVideoConfiguration(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartDirectCdnStreaming_ed8d77b()
        {
            var publishUrl = ParamsHelper.CreateParam<string>();

            var options = ParamsHelper.CreateParam<DirectCdnStreamingMediaOptions>();

            var nRet = @interface.StartDirectCdnStreaming(publishUrl, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopDirectCdnStreaming()
        {
            var nRet = @interface.StopDirectCdnStreaming();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UpdateDirectCdnStreamingMediaOptions_d2556c8()
        {
            var options = ParamsHelper.CreateParam<DirectCdnStreamingMediaOptions>();

            var nRet = @interface.UpdateDirectCdnStreamingMediaOptions(options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartRhythmPlayer_e1f6565()
        {
            var sound1 = ParamsHelper.CreateParam<string>();

            var sound2 = ParamsHelper.CreateParam<string>();

            var config = ParamsHelper.CreateParam<AgoraRhythmPlayerConfig>();

            var nRet = @interface.StartRhythmPlayer(sound1, sound2, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StopRhythmPlayer()
        {
            var nRet = @interface.StopRhythmPlayer();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_ConfigRhythmPlayer_b36c805()
        {
            var config = ParamsHelper.CreateParam<AgoraRhythmPlayerConfig>();

            var nRet = @interface.ConfigRhythmPlayer(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_TakeSnapshot_1922dd1()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var filePath = ParamsHelper.CreateParam<string>();

            var nRet = @interface.TakeSnapshot(uid, filePath);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_TakeSnapshot_5669ea6()
        {
            var uid = ParamsHelper.CreateParam<uint>();

            var config = ParamsHelper.CreateParam<SnapshotConfig>();

            var nRet = @interface.TakeSnapshot(uid, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableContentInspect_e15e514()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var config = ParamsHelper.CreateParam<ContentInspectConfig>();

            var nRet = @interface.EnableContentInspect(enabled, config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustCustomAudioPublishVolume_f8da2ca()
        {
            var trackId = ParamsHelper.CreateParam<uint>();

            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustCustomAudioPublishVolume(trackId, volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_AdjustCustomAudioPlayoutVolume_f8da2ca()
        {
            var trackId = ParamsHelper.CreateParam<uint>();

            var volume = ParamsHelper.CreateParam<int>();

            var nRet = @interface.AdjustCustomAudioPlayoutVolume(trackId, volume);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCloudProxy_39d115e()
        {
            var proxyType = ParamsHelper.CreateParam<CLOUD_PROXY_TYPE>();

            var nRet = @interface.SetCloudProxy(proxyType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetLocalAccessPoint_798c8c7()
        {
            var config = ParamsHelper.CreateParam<LocalAccessPointConfiguration>();

            var nRet = @interface.SetLocalAccessPoint(config);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAdvancedAudioOptions_38d986b()
        {
            var options = ParamsHelper.CreateParam<AdvancedAudioOptions>();

            var sourceType = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetAdvancedAudioOptions(options, sourceType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetAVSyncSource_bf26e54()
        {
            var channelId = ParamsHelper.CreateParam<string>();

            var uid = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.SetAVSyncSource(channelId, uid);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableVideoImageSource_5f39ea0()
        {
            var enable = ParamsHelper.CreateParam<bool>();

            var options = ParamsHelper.CreateParam<ImageTrackOptions>();

            var nRet = @interface.EnableVideoImageSource(enable, options);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetCurrentMonotonicTimeInMs()
        {
            var nRet = @interface.GetCurrentMonotonicTimeInMs();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableWirelessAccelerate_5039d15()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableWirelessAccelerate(enabled);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetNetworkType()
        {
            var nRet = @interface.GetNetworkType();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetParameters_3a2037f()
        {
            var parameters = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SetParameters(parameters);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_StartMediaRenderingTracing()
        {
            var nRet = @interface.StartMediaRenderingTracing();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableInstantMediaRendering()
        {
            var nRet = @interface.EnableInstantMediaRendering();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetNtpWallTimeInMs()
        {
            var nRet = @interface.GetNtpWallTimeInMs();
            Assert.AreEqual(true, nRet > 0);
        }


        [Test]
        public void Test_IsFeatureAvailableOnDevice_a694b62()
        {
            var type = ParamsHelper.CreateParam<FeatureType>();

            var nRet = @interface.IsFeatureAvailableOnDevice(type);
            Assert.AreEqual(true, nRet);
        }


        [Test]
        public void Test_SendAudioMetadata_878f309()
        {
            var metadata = ParamsHelper.CreateParam<byte[]>();

            var length = ParamsHelper.CreateParam<ulong>();

            var nRet = @interface.SendAudioMetadata(metadata, length);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_QueryHDRCapability_bebdacb()
        {
            var videoModule = ParamsHelper.CreateParam<VIDEO_MODULE_TYPE>();

            var capability = ParamsHelper.CreateParam<HDR_CAPABILITY>();

            var nRet = @interface.QueryHDRCapability(videoModule, ref capability);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RegisterFaceInfoObserver_0303ed6()
        {
            var observer = ParamsHelper.CreateParam<IFaceInfoObserver>();

            var nRet = @interface.RegisterFaceInfoObserver(observer);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PushAudioFrame_c71f4ab()
        {
            var frame = ParamsHelper.CreateParam<AudioFrame>();

            var trackId = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.PushAudioFrame(frame, trackId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PullAudioFrame_2c74a9c()
        {
            var frame = ParamsHelper.CreateParam<AudioFrame>();

            var nRet = @interface.PullAudioFrame(frame);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExternalVideoSource_fff99b6()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var useTexture = ParamsHelper.CreateParam<bool>();

            var sourceType = ParamsHelper.CreateParam<EXTERNAL_VIDEO_SOURCE_TYPE>();

            var encodedVideoOption = ParamsHelper.CreateParam<SenderOptions>();

            var nRet = @interface.SetExternalVideoSource(enabled, useTexture, sourceType, encodedVideoOption);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExternalRemoteEglContext_f337cbf()
        {
            var eglContext = ParamsHelper.CreateParam<IntPtr>();

            var nRet = @interface.SetExternalRemoteEglContext(eglContext);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExternalAudioSource_e6538be()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var sampleRate = ParamsHelper.CreateParam<int>();

            var channels = ParamsHelper.CreateParam<int>();

            var localPlayback = ParamsHelper.CreateParam<bool>();

            var publish = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.SetExternalAudioSource(enabled, sampleRate, channels, localPlayback, publish);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_CreateCustomAudioTrack_5a0bf1a()
        {
            var trackType = ParamsHelper.CreateParam<AUDIO_TRACK_TYPE>();

            var config = ParamsHelper.CreateParam<AudioTrackConfig>();

            var nRet = @interface.CreateCustomAudioTrack(trackType, config);
            Assert.AreEqual(true, nRet > 0);
        }


        [Test]
        public void Test_DestroyCustomAudioTrack_6178b5d()
        {
            var trackId = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.DestroyCustomAudioTrack(trackId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetExternalAudioSink_d275ce0()
        {
            var enabled = ParamsHelper.CreateParam<bool>();

            var sampleRate = ParamsHelper.CreateParam<int>();

            var channels = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetExternalAudioSink(enabled, sampleRate, channels);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PushVideoFrame_4e544e2()
        {
            var frame = ParamsHelper.CreateParam<ExternalVideoFrame>();

            var videoTrackId = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.PushVideoFrame(frame, videoTrackId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_PushEncodedVideoImage_e71452b()
        {
            var imageBuffer = ParamsHelper.CreateParam<byte[]>();

            var length = ParamsHelper.CreateParam<ulong>();

            var videoEncodedFrameInfo = ParamsHelper.CreateParam<EncodedVideoFrameInfo>();

            var videoTrackId = ParamsHelper.CreateParam<uint>();

            var nRet = @interface.PushEncodedVideoImage(imageBuffer, length, videoEncodedFrameInfo, videoTrackId);
            Assert.AreEqual(0, nRet);
        }


    }
}