#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using NUnit.Framework;
using Agora.Rtc;
using System;
using view_t = System.UInt64;
namespace Agora.Rtc.Ut
{
    public partial class UnitTest_IMusicContentCenter
    {
        [Test]
        public void Test_Initialize_df70304()
        {
            var configuration = ParamsHelper.CreateParam<MusicContentCenterConfiguration>();

            var nRet = @interface.Initialize(configuration);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RenewToken_3a2037f()
        {
            var token = ParamsHelper.CreateParam<string>();

            var nRet = @interface.RenewToken(token);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_UnregisterEventHandler()
        {
            var nRet = @interface.UnregisterEventHandler();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetMusicCharts_66d4ecd()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var nRet = @interface.GetMusicCharts(ref requestId);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetMusicCollectionByMusicChartId_8cd0b4d()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var musicChartId = ParamsHelper.CreateParam<int>();

            var page = ParamsHelper.CreateParam<int>();

            var pageSize = ParamsHelper.CreateParam<int>();

            var jsonOption = ParamsHelper.CreateParam<string>();

            var nRet = @interface.GetMusicCollectionByMusicChartId(ref requestId, musicChartId, page, pageSize, jsonOption);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SearchMusic_3f8cf09()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var keyWord = ParamsHelper.CreateParam<string>();

            var page = ParamsHelper.CreateParam<int>();

            var pageSize = ParamsHelper.CreateParam<int>();

            var jsonOption = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SearchMusic(ref requestId, keyWord, page, pageSize, jsonOption);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_Preload_bd5a5a3()
        {
            var songCode = ParamsHelper.CreateParam<long>();

            var jsonOption = ParamsHelper.CreateParam<string>();

            var nRet = @interface.Preload(songCode, jsonOption);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_Preload_d3baeab()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var songCode = ParamsHelper.CreateParam<long>();

            var nRet = @interface.Preload(ref requestId, songCode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RemoveCache_f631116()
        {
            var songCode = ParamsHelper.CreateParam<long>();

            var nRet = @interface.RemoveCache(songCode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetCaches_c4f9978()
        {
            var cacheInfo = ParamsHelper.CreateParam<MusicCacheInfo[]>();

            var cacheInfoSize = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetCaches(ref cacheInfo, ref cacheInfoSize);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_IsPreloaded_f631116()
        {
            var songCode = ParamsHelper.CreateParam<long>();

            var nRet = @interface.IsPreloaded(songCode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetLyric_5ab5efd()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var songCode = ParamsHelper.CreateParam<long>();

            var lyricType = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetLyric(ref requestId, songCode, lyricType);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetSongSimpleInfo_d3baeab()
        {
            var requestId = ParamsHelper.CreateParam<string>();

            var songCode = ParamsHelper.CreateParam<long>();

            var nRet = @interface.GetSongSimpleInfo(ref requestId, songCode);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetInternalSongCode_3a3d1e7()
        {
            var songCode = ParamsHelper.CreateParam<long>();

            var jsonOption = ParamsHelper.CreateParam<string>();

            var internalSongCode = ParamsHelper.CreateParam<long>();

            var nRet = @interface.GetInternalSongCode(songCode, jsonOption, ref internalSongCode);
            Assert.AreEqual(0, nRet);
        }


    }
}