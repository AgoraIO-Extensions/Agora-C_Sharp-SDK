#region Generated by `terra/node/src/rtc/ut/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

using NUnit.Framework;
using Agora.Rtc;
using System;
using view_t = System.UInt64;
namespace Agora.Rtc.Ut
{
    public partial class UnitTest_IMediaPlayerCacheManager
    {
        [Test]
        public void Test_RemoveAllCaches()
        {
            var nRet = @interface.RemoveAllCaches();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RemoveOldCache()
        {
            var nRet = @interface.RemoveOldCache();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_RemoveCacheByUri_3a2037f()
        {
            var uri = ParamsHelper.CreateParam<string>();

            var nRet = @interface.RemoveCacheByUri(uri);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetCacheDir_3a2037f()
        {
            var path = ParamsHelper.CreateParam<string>();

            var nRet = @interface.SetCacheDir(path);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetMaxCacheFileCount_46f8ab7()
        {
            var count = ParamsHelper.CreateParam<int>();

            var nRet = @interface.SetMaxCacheFileCount(count);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_SetMaxCacheFileSize_f631116()
        {
            var cacheSize = ParamsHelper.CreateParam<long>();

            var nRet = @interface.SetMaxCacheFileSize(cacheSize);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_EnableAutoRemoveCache_5039d15()
        {
            var enable = ParamsHelper.CreateParam<bool>();

            var nRet = @interface.EnableAutoRemoveCache(enable);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetCacheDir_c9551e8()
        {
            var path = ParamsHelper.CreateParam<string>();

            var length = ParamsHelper.CreateParam<int>();

            var nRet = @interface.GetCacheDir(ref path, length);
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetMaxCacheFileCount()
        {
            var nRet = @interface.GetMaxCacheFileCount();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetMaxCacheFileSize()
        {
            var nRet = @interface.GetMaxCacheFileSize();
            Assert.AreEqual(0, nRet);
        }


        [Test]
        public void Test_GetCacheFileCount()
        {
            var nRet = @interface.GetCacheFileCount();
            Assert.AreEqual(0, nRet);
        }


    }
}