#region Generated by `terra/node/src/rtc/middle/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

#define AGORA_RTC
#define AGORA_RTM
using System;
using view_t = System.UInt64;

namespace Agora.Rtc
{
    public partial class MediaPlayerCacheManager : IMediaPlayerCacheManager
    {

        public override int RemoveAllCaches()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RemoveAllCaches();
        }

        public override int RemoveOldCache()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RemoveOldCache();
        }

        public override int RemoveCacheByUri(string uri)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RemoveCacheByUri(uri);
        }

        public override int SetCacheDir(string path)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCacheDir(path);
        }

        public override int SetMaxCacheFileCount(int count)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetMaxCacheFileCount(count);
        }

        public override int SetMaxCacheFileSize(long cacheSize)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetMaxCacheFileSize(cacheSize);
        }

        public override int EnableAutoRemoveCache(bool enable)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableAutoRemoveCache(enable);
        }

        public override int GetCacheDir(ref string path, int length)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetCacheDir(ref path, length);
        }

        public override int GetMaxCacheFileCount()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetMaxCacheFileCount();
        }

        public override long GetMaxCacheFileSize()
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.GetMaxCacheFileSize();
        }

        public override int GetCacheFileCount()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetCacheFileCount();
        }

    }
}