#region Generated by `terra/node/src/rtc/middle/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

#define AGORA_RTC
#define AGORA_RTM
using System;
using view_t = System.UInt64;

namespace Agora.Rtc
{
    public partial class RtcEngine : IRtcEngineEx
    {

        public override int Initialize(RtcEngineContext context)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.Initialize(context);
        }

        public override string GetVersion(ref int build)
        {
            if (_impl == null)
            {
                return "";
            }
            return _impl.GetVersion(ref build);
        }

        public override string GetErrorDescription(int code)
        {
            if (_impl == null)
            {
                return "";
            }
            return _impl.GetErrorDescription(code);
        }

        public override int QueryCodecCapability(ref CodecCapInfo[] codecInfo, ref int size)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.QueryCodecCapability(ref codecInfo, ref size);
        }

        public override int QueryDeviceScore()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.QueryDeviceScore();
        }

        public override int PreloadChannel(string token, string channelId, uint uid)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PreloadChannel(token, channelId, uid);
        }

        public override int PreloadChannelWithUserAccount(string token, string channelId, string userAccount)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PreloadChannelWithUserAccount(token, channelId, userAccount);
        }

        public override int UpdatePreloadChannelToken(string token)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdatePreloadChannelToken(token);
        }

        public override int JoinChannel(string token, string channelId, string info, uint uid)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.JoinChannel(token, channelId, info, uid);
        }

        public override int JoinChannel(string token, string channelId, uint uid, ChannelMediaOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.JoinChannel(token, channelId, uid, options);
        }

        public override int UpdateChannelMediaOptions(ChannelMediaOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateChannelMediaOptions(options);
        }

        public override int LeaveChannel()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.LeaveChannel();
        }

        public override int LeaveChannel(LeaveChannelOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.LeaveChannel(options);
        }

        public override int RenewToken(string token)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RenewToken(token);
        }

        public override int SetChannelProfile(CHANNEL_PROFILE_TYPE profile)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetChannelProfile(profile);
        }

        public override int SetClientRole(CLIENT_ROLE_TYPE role)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetClientRole(role);
        }

        public override int SetClientRole(CLIENT_ROLE_TYPE role, ClientRoleOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetClientRole(role, options);
        }

        public override int StartEchoTest()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartEchoTest();
        }

        public override int StartEchoTest(int intervalInSeconds)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartEchoTest(intervalInSeconds);
        }

        public override int StartEchoTest(EchoTestConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartEchoTest(config);
        }

        public override int StopEchoTest()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopEchoTest();
        }

        public override int EnableMultiCamera(bool enabled, CameraCapturerConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableMultiCamera(enabled, config);
        }

        public override int EnableVideo()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableVideo();
        }

        public override int DisableVideo()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.DisableVideo();
        }

        public override int StartPreview()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartPreview();
        }

        public override int StartPreview(VIDEO_SOURCE_TYPE sourceType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartPreview(sourceType);
        }

        public override int StopPreview()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopPreview();
        }

        public override int StopPreview(VIDEO_SOURCE_TYPE sourceType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopPreview(sourceType);
        }

        public override int StartLastmileProbeTest(LastmileProbeConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartLastmileProbeTest(config);
        }

        public override int StopLastmileProbeTest()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopLastmileProbeTest();
        }

        public override int SetVideoEncoderConfiguration(VideoEncoderConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVideoEncoderConfiguration(config);
        }

        public override int SetBeautyEffectOptions(bool enabled, BeautyOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetBeautyEffectOptions(enabled, options, type);
        }

        public override int SetLowlightEnhanceOptions(bool enabled, LowlightEnhanceOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLowlightEnhanceOptions(enabled, options, type);
        }

        public override int SetVideoDenoiserOptions(bool enabled, VideoDenoiserOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVideoDenoiserOptions(enabled, options, type);
        }

        public override int SetColorEnhanceOptions(bool enabled, ColorEnhanceOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetColorEnhanceOptions(enabled, options, type);
        }

        public override int EnableVirtualBackground(bool enabled, VirtualBackgroundSource backgroundSource, SegmentationProperty segproperty, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableVirtualBackground(enabled, backgroundSource, segproperty, type);
        }

        public override int SetupRemoteVideo(VideoCanvas canvas)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetupRemoteVideo(canvas);
        }

        public override int SetupLocalVideo(VideoCanvas canvas)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetupLocalVideo(canvas);
        }

        public override int SetVideoScenario(VIDEO_APPLICATION_SCENARIO_TYPE scenarioType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVideoScenario(scenarioType);
        }

        public override int SetVideoQoEPreference(VIDEO_QOE_PREFERENCE_TYPE qoePreference)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVideoQoEPreference(qoePreference);
        }

        public override int EnableAudio()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableAudio();
        }

        public override int DisableAudio()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.DisableAudio();
        }

        public override int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioProfile(profile, scenario);
        }

        public override int SetAudioProfile(AUDIO_PROFILE_TYPE profile)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioProfile(profile);
        }

        public override int SetAudioScenario(AUDIO_SCENARIO_TYPE scenario)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioScenario(scenario);
        }

        public override int EnableLocalAudio(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableLocalAudio(enabled);
        }

        public override int MuteLocalAudioStream(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteLocalAudioStream(mute);
        }

        public override int MuteAllRemoteAudioStreams(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteAllRemoteAudioStreams(mute);
        }

        public override int SetDefaultMuteAllRemoteAudioStreams(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDefaultMuteAllRemoteAudioStreams(mute);
        }

        public override int MuteRemoteAudioStream(uint uid, bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRemoteAudioStream(uid, mute);
        }

        public override int MuteLocalVideoStream(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteLocalVideoStream(mute);
        }

        public override int EnableLocalVideo(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableLocalVideo(enabled);
        }

        public override int MuteAllRemoteVideoStreams(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteAllRemoteVideoStreams(mute);
        }

        public override int SetDefaultMuteAllRemoteVideoStreams(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDefaultMuteAllRemoteVideoStreams(mute);
        }

        public override int SetRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteDefaultVideoStreamType(streamType);
        }

        public override int MuteRemoteVideoStream(uint uid, bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRemoteVideoStream(uid, mute);
        }

        public override int SetRemoteVideoStreamType(uint uid, VIDEO_STREAM_TYPE streamType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteVideoStreamType(uid, streamType);
        }

        public override int SetRemoteVideoSubscriptionOptions(uint uid, VideoSubscriptionOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteVideoSubscriptionOptions(uid, options);
        }

        public override int SetSubscribeAudioBlocklist(uint[] uidList, int uidNumber)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeAudioBlocklist(uidList, uidNumber);
        }

        public override int SetSubscribeAudioAllowlist(uint[] uidList, int uidNumber)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeAudioAllowlist(uidList, uidNumber);
        }

        public override int SetSubscribeVideoBlocklist(uint[] uidList, int uidNumber)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeVideoBlocklist(uidList, uidNumber);
        }

        public override int SetSubscribeVideoAllowlist(uint[] uidList, int uidNumber)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeVideoAllowlist(uidList, uidNumber);
        }

        public override int EnableAudioVolumeIndication(int interval, int smooth, bool reportVad)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableAudioVolumeIndication(interval, smooth, reportVad);
        }

        public override int StartAudioRecording(string filePath, AUDIO_RECORDING_QUALITY_TYPE quality)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartAudioRecording(filePath, quality);
        }

        public override int StartAudioRecording(string filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartAudioRecording(filePath, sampleRate, quality);
        }

        public override int StartAudioRecording(AudioRecordingConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartAudioRecording(config);
        }

        public override int RegisterAudioEncodedFrameObserver(AudioEncodedFrameObserverConfig config, IAudioEncodedFrameObserver observer)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RegisterAudioEncodedFrameObserver(config, observer);
        }

        public override int StopAudioRecording()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopAudioRecording();
        }

        public override int StartAudioMixing(string filePath, bool loopback, int cycle)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartAudioMixing(filePath, loopback, cycle);
        }

        public override int StartAudioMixing(string filePath, bool loopback, int cycle, int startPos)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartAudioMixing(filePath, loopback, cycle, startPos);
        }

        public override int StopAudioMixing()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopAudioMixing();
        }

        public override int PauseAudioMixing()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PauseAudioMixing();
        }

        public override int ResumeAudioMixing()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ResumeAudioMixing();
        }

        public override int SelectAudioTrack(int index)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SelectAudioTrack(index);
        }

        public override int GetAudioTrackCount()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetAudioTrackCount();
        }

        public override int AdjustAudioMixingVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustAudioMixingVolume(volume);
        }

        public override int AdjustAudioMixingPublishVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustAudioMixingPublishVolume(volume);
        }

        public override int GetAudioMixingPublishVolume()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetAudioMixingPublishVolume();
        }

        public override int AdjustAudioMixingPlayoutVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustAudioMixingPlayoutVolume(volume);
        }

        public override int GetAudioMixingPlayoutVolume()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetAudioMixingPlayoutVolume();
        }

        public override int GetAudioMixingDuration()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetAudioMixingDuration();
        }

        public override int GetAudioMixingCurrentPosition()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetAudioMixingCurrentPosition();
        }

        public override int SetAudioMixingPosition(int pos)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioMixingPosition(pos);
        }

        public override int SetAudioMixingDualMonoMode(AUDIO_MIXING_DUAL_MONO_MODE mode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioMixingDualMonoMode(mode);
        }

        public override int SetAudioMixingPitch(int pitch)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioMixingPitch(pitch);
        }

        public override int SetAudioMixingPlaybackSpeed(int speed)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioMixingPlaybackSpeed(speed);
        }

        public override int GetEffectsVolume()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetEffectsVolume();
        }

        public override int SetEffectsVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetEffectsVolume(volume);
        }

        public override int PreloadEffect(int soundId, string filePath, int startPos = 0)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PreloadEffect(soundId, filePath, startPos);
        }

        public override int PlayEffect(int soundId, string filePath, int loopCount, double pitch, double pan, int gain, bool publish = false, int startPos = 0)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PlayEffect(soundId, filePath, loopCount, pitch, pan, gain, publish, startPos);
        }

        public override int PlayAllEffects(int loopCount, double pitch, double pan, int gain, bool publish = false)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PlayAllEffects(loopCount, pitch, pan, gain, publish);
        }

        public override int GetVolumeOfEffect(int soundId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetVolumeOfEffect(soundId);
        }

        public override int SetVolumeOfEffect(int soundId, int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVolumeOfEffect(soundId, volume);
        }

        public override int PauseEffect(int soundId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PauseEffect(soundId);
        }

        public override int PauseAllEffects()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PauseAllEffects();
        }

        public override int ResumeEffect(int soundId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ResumeEffect(soundId);
        }

        public override int ResumeAllEffects()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ResumeAllEffects();
        }

        public override int StopEffect(int soundId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopEffect(soundId);
        }

        public override int StopAllEffects()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopAllEffects();
        }

        public override int UnloadEffect(int soundId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UnloadEffect(soundId);
        }

        public override int UnloadAllEffects()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UnloadAllEffects();
        }

        public override int GetEffectDuration(string filePath)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetEffectDuration(filePath);
        }

        public override int SetEffectPosition(int soundId, int pos)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetEffectPosition(soundId, pos);
        }

        public override int GetEffectCurrentPosition(int soundId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetEffectCurrentPosition(soundId);
        }

        public override int EnableSoundPositionIndication(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableSoundPositionIndication(enabled);
        }

        public override int SetRemoteVoicePosition(uint uid, double pan, double gain)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteVoicePosition(uid, pan, gain);
        }

        public override int EnableSpatialAudio(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableSpatialAudio(enabled);
        }

        public override int SetRemoteUserSpatialAudioParams(uint uid, SpatialAudioParams @params)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteUserSpatialAudioParams(uid, @params);
        }

        public override int SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET preset)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVoiceBeautifierPreset(preset);
        }

        public override int SetAudioEffectPreset(AUDIO_EFFECT_PRESET preset)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioEffectPreset(preset);
        }

        public override int SetVoiceConversionPreset(VOICE_CONVERSION_PRESET preset)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVoiceConversionPreset(preset);
        }

        public override int SetAudioEffectParameters(AUDIO_EFFECT_PRESET preset, int param1, int param2)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioEffectParameters(preset, param1, param2);
        }

        public override int SetVoiceBeautifierParameters(VOICE_BEAUTIFIER_PRESET preset, int param1, int param2)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVoiceBeautifierParameters(preset, param1, param2);
        }

        public override int SetVoiceConversionParameters(VOICE_CONVERSION_PRESET preset, int param1, int param2)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVoiceConversionParameters(preset, param1, param2);
        }

        public override int SetLocalVoicePitch(double pitch)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalVoicePitch(pitch);
        }

        public override int SetLocalVoiceFormant(double formantRatio)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalVoiceFormant(formantRatio);
        }

        public override int SetLocalVoiceEqualization(AUDIO_EQUALIZATION_BAND_FREQUENCY bandFrequency, int bandGain)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalVoiceEqualization(bandFrequency, bandGain);
        }

        public override int SetLocalVoiceReverb(AUDIO_REVERB_TYPE reverbKey, int value)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalVoiceReverb(reverbKey, value);
        }

        public override int SetHeadphoneEQPreset(HEADPHONE_EQUALIZER_PRESET preset)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetHeadphoneEQPreset(preset);
        }

        public override int SetHeadphoneEQParameters(int lowGain, int highGain)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetHeadphoneEQParameters(lowGain, highGain);
        }

        public override int SetLogFile(string filePath)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLogFile(filePath);
        }

        public override int SetLogFilter(uint filter)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLogFilter(filter);
        }

        public override int SetLogLevel(LOG_LEVEL level)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLogLevel(level);
        }

        public override int SetLogFileSize(uint fileSizeInKBytes)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLogFileSize(fileSizeInKBytes);
        }

        public override int UploadLogFile(ref string requestId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UploadLogFile(ref requestId);
        }

        public override int WriteLog(LOG_LEVEL level, string fmt)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.WriteLog(level, fmt);
        }

        public override int SetLocalRenderMode(RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalRenderMode(renderMode, mirrorMode);
        }

        public override int SetRemoteRenderMode(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteRenderMode(uid, renderMode, mirrorMode);
        }

        public override int SetLocalRenderMode(RENDER_MODE_TYPE renderMode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalRenderMode(renderMode);
        }

        public override int SetLocalVideoMirrorMode(VIDEO_MIRROR_MODE_TYPE mirrorMode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalVideoMirrorMode(mirrorMode);
        }

        public override int EnableDualStreamMode(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableDualStreamMode(enabled);
        }

        public override int EnableDualStreamMode(bool enabled, SimulcastStreamConfig streamConfig)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableDualStreamMode(enabled, streamConfig);
        }

        public override int SetDualStreamMode(SIMULCAST_STREAM_MODE mode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDualStreamMode(mode);
        }

        public override int SetDualStreamMode(SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDualStreamMode(mode, streamConfig);
        }

        public override int EnableCustomAudioLocalPlayback(uint trackId, bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableCustomAudioLocalPlayback(trackId, enabled);
        }

        public override int SetRecordingAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRecordingAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
        }

        public override int SetPlaybackAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetPlaybackAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
        }

        public override int SetMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetMixedAudioFrameParameters(sampleRate, channel, samplesPerCall);
        }

        public override int SetEarMonitoringAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetEarMonitoringAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
        }

        public override int SetPlaybackAudioFrameBeforeMixingParameters(int sampleRate, int channel)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetPlaybackAudioFrameBeforeMixingParameters(sampleRate, channel);
        }

        public override int EnableAudioSpectrumMonitor(int intervalInMS = 100)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableAudioSpectrumMonitor(intervalInMS);
        }

        public override int DisableAudioSpectrumMonitor()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.DisableAudioSpectrumMonitor();
        }

        public override int RegisterAudioSpectrumObserver(IAudioSpectrumObserver observer)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RegisterAudioSpectrumObserver(observer);
        }

        public override int UnregisterAudioSpectrumObserver()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UnregisterAudioSpectrumObserver();
        }

        public override int AdjustRecordingSignalVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustRecordingSignalVolume(volume);
        }

        public override int MuteRecordingSignal(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRecordingSignal(mute);
        }

        public override int AdjustPlaybackSignalVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustPlaybackSignalVolume(volume);
        }

        public override int AdjustUserPlaybackSignalVolume(uint uid, int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustUserPlaybackSignalVolume(uid, volume);
        }

        public override int SetLocalPublishFallbackOption(STREAM_FALLBACK_OPTIONS option)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalPublishFallbackOption(option);
        }

        public override int SetRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteSubscribeFallbackOption(option);
        }

        public override int SetHighPriorityUserList(uint[] uidList, int uidNum, STREAM_FALLBACK_OPTIONS option)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetHighPriorityUserList(uidList, uidNum, option);
        }

        public override int EnableExtension(string provider, string extension, ExtensionInfo extensionInfo, bool enable = true)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableExtension(provider, extension, extensionInfo, enable);
        }

        public override int SetExtensionProperty(string provider, string extension, ExtensionInfo extensionInfo, string key, string value)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetExtensionProperty(provider, extension, extensionInfo, key, value);
        }

        public override int GetExtensionProperty(string provider, string extension, ExtensionInfo extensionInfo, string key, ref string value, int buf_len)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetExtensionProperty(provider, extension, extensionInfo, key, ref value, buf_len);
        }

        public override int EnableLoopbackRecording(bool enabled, string deviceName = "")
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableLoopbackRecording(enabled, deviceName);
        }

        public override int AdjustLoopbackSignalVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustLoopbackSignalVolume(volume);
        }

        public override int GetLoopbackRecordingVolume()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetLoopbackRecordingVolume();
        }

        public override int EnableInEarMonitoring(bool enabled, int includeAudioFilters)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableInEarMonitoring(enabled, includeAudioFilters);
        }

        public override int SetInEarMonitoringVolume(int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetInEarMonitoringVolume(volume);
        }

        public override int LoadExtensionProvider(string path, bool unload_after_use = false)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.LoadExtensionProvider(path, unload_after_use);
        }

        public override int SetExtensionProviderProperty(string provider, string key, string value)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetExtensionProviderProperty(provider, key, value);
        }

        public override int RegisterExtension(string provider, string extension, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RegisterExtension(provider, extension, type);
        }

        public override int EnableExtension(string provider, string extension, bool enable = true, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableExtension(provider, extension, enable, type);
        }

        public override int SetExtensionProperty(string provider, string extension, string key, string value, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetExtensionProperty(provider, extension, key, value, type);
        }

        public override int GetExtensionProperty(string provider, string extension, string key, ref string value, int buf_len, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetExtensionProperty(provider, extension, key, ref value, buf_len, type);
        }

        public override int SetCameraCapturerConfiguration(CameraCapturerConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraCapturerConfiguration(config);
        }

        public override uint CreateCustomVideoTrack()
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.CreateCustomVideoTrack();
        }

        public override uint CreateCustomEncodedVideoTrack(SenderOptions sender_option)
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.CreateCustomEncodedVideoTrack(sender_option);
        }

        public override int DestroyCustomVideoTrack(uint video_track_id)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.DestroyCustomVideoTrack(video_track_id);
        }

        public override int DestroyCustomEncodedVideoTrack(uint video_track_id)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.DestroyCustomEncodedVideoTrack(video_track_id);
        }

        public override int SwitchCamera()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SwitchCamera();
        }

        public override bool IsCameraZoomSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraZoomSupported();
        }

        public override bool IsCameraFaceDetectSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraFaceDetectSupported();
        }

        public override bool IsCameraTorchSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraTorchSupported();
        }

        public override bool IsCameraFocusSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraFocusSupported();
        }

        public override bool IsCameraAutoFocusFaceModeSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraAutoFocusFaceModeSupported();
        }

        public override int SetCameraZoomFactor(float factor)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraZoomFactor(factor);
        }

        public override int EnableFaceDetection(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableFaceDetection(enabled);
        }

        public override float GetCameraMaxZoomFactor()
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.GetCameraMaxZoomFactor();
        }

        public override int SetCameraFocusPositionInPreview(float positionX, float positionY)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraFocusPositionInPreview(positionX, positionY);
        }

        public override int SetCameraTorchOn(bool isOn)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraTorchOn(isOn);
        }

        public override int SetCameraAutoFocusFaceModeEnabled(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraAutoFocusFaceModeEnabled(enabled);
        }

        public override bool IsCameraExposurePositionSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraExposurePositionSupported();
        }

        public override int SetCameraExposurePosition(float positionXinView, float positionYinView)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraExposurePosition(positionXinView, positionYinView);
        }

        public override bool IsCameraExposureSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraExposureSupported();
        }

        public override int SetCameraExposureFactor(float factor)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraExposureFactor(factor);
        }

        public override bool IsCameraAutoExposureFaceModeSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraAutoExposureFaceModeSupported();
        }

        public override int SetCameraAutoExposureFaceModeEnabled(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraAutoExposureFaceModeEnabled(enabled);
        }

        public override int SetCameraStabilizationMode(CAMERA_STABILIZATION_MODE mode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraStabilizationMode(mode);
        }

        public override int SetDefaultAudioRouteToSpeakerphone(bool defaultToSpeaker)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDefaultAudioRouteToSpeakerphone(defaultToSpeaker);
        }

        public override int SetEnableSpeakerphone(bool speakerOn)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetEnableSpeakerphone(speakerOn);
        }

        public override bool IsSpeakerphoneEnabled()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsSpeakerphoneEnabled();
        }

        public override int SetRouteInCommunicationMode(int route)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRouteInCommunicationMode(route);
        }

        public override bool IsCameraCenterStageSupported()
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsCameraCenterStageSupported();
        }

        public override int EnableCameraCenterStage(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableCameraCenterStage(enabled);
        }

        public override ScreenCaptureSourceInfo[] GetScreenCaptureSources(SIZE thumbSize, SIZE iconSize, bool includeScreen)
        {
            if (_impl == null)
            {
                return null;
            }
            return _impl.GetScreenCaptureSources(thumbSize, iconSize, includeScreen);
        }

        public override int SetAudioSessionOperationRestriction(AUDIO_SESSION_OPERATION_RESTRICTION restriction)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioSessionOperationRestriction(restriction);
        }

        public override int StartScreenCaptureByDisplayId(uint displayId, Rectangle regionRect, ScreenCaptureParameters captureParams)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartScreenCaptureByDisplayId(displayId, regionRect, captureParams);
        }

        public override int StartScreenCaptureByScreenRect(Rectangle screenRect, Rectangle regionRect, ScreenCaptureParameters captureParams)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartScreenCaptureByScreenRect(screenRect, regionRect, captureParams);
        }

        public override int GetAudioDeviceInfo(ref DeviceInfoMobile deviceInfo)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetAudioDeviceInfo(ref deviceInfo);
        }

        public override int StartScreenCaptureByWindowId(view_t windowId, Rectangle regionRect, ScreenCaptureParameters captureParams)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartScreenCaptureByWindowId(windowId, regionRect, captureParams);
        }

        public override int SetScreenCaptureContentHint(VIDEO_CONTENT_HINT contentHint)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetScreenCaptureContentHint(contentHint);
        }

        public override int UpdateScreenCaptureRegion(Rectangle regionRect)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateScreenCaptureRegion(regionRect);
        }

        public override int UpdateScreenCaptureParameters(ScreenCaptureParameters captureParams)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateScreenCaptureParameters(captureParams);
        }

        public override int StartScreenCapture(ScreenCaptureParameters2 captureParams)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartScreenCapture(captureParams);
        }

        public override int UpdateScreenCapture(ScreenCaptureParameters2 captureParams)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateScreenCapture(captureParams);
        }

        public override int QueryScreenCaptureCapability()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.QueryScreenCaptureCapability();
        }

        public override int QueryCameraFocalLengthCapability(ref FocalLengthInfo[] focalLengthInfos, ref int size)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.QueryCameraFocalLengthCapability(ref focalLengthInfos, ref size);
        }

        public override int SetScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetScreenCaptureScenario(screenScenario);
        }

        public override int StopScreenCapture()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopScreenCapture();
        }

        public override int GetCallId(ref string callId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetCallId(ref callId);
        }

        public override int Rate(string callId, int rating, string description)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.Rate(callId, rating, description);
        }

        public override int Complain(string callId, string description)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.Complain(callId, description);
        }

        public override int StartRtmpStreamWithoutTranscoding(string url)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartRtmpStreamWithoutTranscoding(url);
        }

        public override int StartRtmpStreamWithTranscoding(string url, LiveTranscoding transcoding)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartRtmpStreamWithTranscoding(url, transcoding);
        }

        public override int UpdateRtmpTranscoding(LiveTranscoding transcoding)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateRtmpTranscoding(transcoding);
        }

        public override int StartLocalVideoTranscoder(LocalTranscoderConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartLocalVideoTranscoder(config);
        }

        public override int UpdateLocalTranscoderConfiguration(LocalTranscoderConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateLocalTranscoderConfiguration(config);
        }

        public override int StopRtmpStream(string url)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopRtmpStream(url);
        }

        public override int StopLocalVideoTranscoder()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopLocalVideoTranscoder();
        }

        public override int StartCameraCapture(VIDEO_SOURCE_TYPE sourceType, CameraCapturerConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartCameraCapture(sourceType, config);
        }

        public override int StopCameraCapture(VIDEO_SOURCE_TYPE sourceType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopCameraCapture(sourceType);
        }

        public override int SetCameraDeviceOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCameraDeviceOrientation(type, orientation);
        }

        public override int SetScreenCaptureOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetScreenCaptureOrientation(type, orientation);
        }

        public override int StartScreenCapture(VIDEO_SOURCE_TYPE sourceType, ScreenCaptureConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartScreenCapture(sourceType, config);
        }

        public override int StopScreenCapture(VIDEO_SOURCE_TYPE sourceType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopScreenCapture(sourceType);
        }

        public override CONNECTION_STATE_TYPE GetConnectionState()
        {
            if (_impl == null)
            {
                return CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED;
            }
            return _impl.GetConnectionState();
        }

        public override int SetRemoteUserPriority(uint uid, PRIORITY_TYPE userPriority)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteUserPriority(uid, userPriority);
        }

        public override int SetEncryptionMode(string encryptionMode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetEncryptionMode(encryptionMode);
        }

        public override int SetEncryptionSecret(string secret)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetEncryptionSecret(secret);
        }

        public override int EnableEncryption(bool enabled, EncryptionConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableEncryption(enabled, config);
        }

        public override int CreateDataStream(ref int streamId, bool reliable, bool ordered)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.CreateDataStream(ref streamId, reliable, ordered);
        }

        public override int CreateDataStream(ref int streamId, DataStreamConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.CreateDataStream(ref streamId, config);
        }

        public override int SendStreamMessage(int streamId, byte[] data, uint length)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendStreamMessage(streamId, data, length);
        }

        public override int SendRdtMessage(uint uid, RdtStreamType type, string data, ulong length)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendRdtMessage(uid, type, data, length);
        }

        public override int SendMediaControlMessage(uint uid, string data, ulong length)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendMediaControlMessage(uid, data, length);
        }

        public override int AddVideoWatermark(RtcImage watermark)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AddVideoWatermark(watermark);
        }

        public override int AddVideoWatermark(string watermarkUrl, WatermarkOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AddVideoWatermark(watermarkUrl, options);
        }

        public override int ClearVideoWatermarks()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ClearVideoWatermarks();
        }

        public override int PauseAudio()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PauseAudio();
        }

        public override int ResumeAudio()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ResumeAudio();
        }

        public override int EnableWebSdkInteroperability(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableWebSdkInteroperability(enabled);
        }

        public override int SendCustomReportMessage(string id, string category, string @event, string label, int value)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendCustomReportMessage(id, category, @event, label, value);
        }

        public override int RegisterMediaMetadataObserver(IMetadataObserver observer, METADATA_TYPE type)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RegisterMediaMetadataObserver(observer, type);
        }

        public override int UnregisterMediaMetadataObserver()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UnregisterMediaMetadataObserver();
        }

        public override int StartAudioFrameDump(string channel_id, uint uid, string location, string uuid, string passwd, long duration_ms, bool auto_upload)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartAudioFrameDump(channel_id, uid, location, uuid, passwd, duration_ms, auto_upload);
        }

        public override int StopAudioFrameDump(string channel_id, uint uid, string location)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopAudioFrameDump(channel_id, uid, location);
        }

        public override int SetAINSMode(bool enabled, AUDIO_AINS_MODE mode)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAINSMode(enabled, mode);
        }

        public override int RegisterLocalUserAccount(string appId, string userAccount)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RegisterLocalUserAccount(appId, userAccount);
        }

        public override int JoinChannelWithUserAccount(string token, string channelId, string userAccount)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.JoinChannelWithUserAccount(token, channelId, userAccount);
        }

        public override int JoinChannelWithUserAccount(string token, string channelId, string userAccount, ChannelMediaOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.JoinChannelWithUserAccount(token, channelId, userAccount, options);
        }

        public override int GetUserInfoByUserAccount(string userAccount, ref UserInfo userInfo)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetUserInfoByUserAccount(userAccount, ref userInfo);
        }

        public override int GetUserInfoByUid(uint uid, ref UserInfo userInfo)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetUserInfoByUid(uid, ref userInfo);
        }

        public override int StartOrUpdateChannelMediaRelay(ChannelMediaRelayConfiguration configuration)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartOrUpdateChannelMediaRelay(configuration);
        }

        public override int StopChannelMediaRelay()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopChannelMediaRelay();
        }

        public override int PauseAllChannelMediaRelay()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PauseAllChannelMediaRelay();
        }

        public override int ResumeAllChannelMediaRelay()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ResumeAllChannelMediaRelay();
        }

        public override int SetDirectCdnStreamingAudioConfiguration(AUDIO_PROFILE_TYPE profile)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDirectCdnStreamingAudioConfiguration(profile);
        }

        public override int SetDirectCdnStreamingVideoConfiguration(VideoEncoderConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDirectCdnStreamingVideoConfiguration(config);
        }

        public override int StartDirectCdnStreaming(string publishUrl, DirectCdnStreamingMediaOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartDirectCdnStreaming(publishUrl, options);
        }

        public override int StopDirectCdnStreaming()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopDirectCdnStreaming();
        }

        public override int UpdateDirectCdnStreamingMediaOptions(DirectCdnStreamingMediaOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateDirectCdnStreamingMediaOptions(options);
        }

        public override int StartRhythmPlayer(string sound1, string sound2, AgoraRhythmPlayerConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartRhythmPlayer(sound1, sound2, config);
        }

        public override int StopRhythmPlayer()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopRhythmPlayer();
        }

        public override int ConfigRhythmPlayer(AgoraRhythmPlayerConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ConfigRhythmPlayer(config);
        }

        public override int TakeSnapshot(uint uid, string filePath)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.TakeSnapshot(uid, filePath);
        }

        public override int EnableContentInspect(bool enabled, ContentInspectConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableContentInspect(enabled, config);
        }

        public override int AdjustCustomAudioPublishVolume(uint trackId, int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustCustomAudioPublishVolume(trackId, volume);
        }

        public override int AdjustCustomAudioPlayoutVolume(uint trackId, int volume)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustCustomAudioPlayoutVolume(trackId, volume);
        }

        public override int SetCloudProxy(CLOUD_PROXY_TYPE proxyType)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetCloudProxy(proxyType);
        }

        public override int SetLocalAccessPoint(LocalAccessPointConfiguration config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetLocalAccessPoint(config);
        }

        public override int SetAdvancedAudioOptions(AdvancedAudioOptions options, int sourceType = 0)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAdvancedAudioOptions(options, sourceType);
        }

        public override int SetAVSyncSource(string channelId, uint uid)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAVSyncSource(channelId, uid);
        }

        public override int EnableVideoImageSource(bool enable, ImageTrackOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableVideoImageSource(enable, options);
        }

        public override long GetCurrentMonotonicTimeInMs()
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.GetCurrentMonotonicTimeInMs();
        }

        public override int EnableWirelessAccelerate(bool enabled)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableWirelessAccelerate(enabled);
        }

        public override int GetNetworkType()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetNetworkType();
        }

        public override int SetParameters(string parameters)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetParameters(parameters);
        }

        public override int StartMediaRenderingTracing()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartMediaRenderingTracing();
        }

        public override int EnableInstantMediaRendering()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableInstantMediaRendering();
        }

        public override ulong GetNtpWallTimeInMs()
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.GetNtpWallTimeInMs();
        }

        public override bool IsFeatureAvailableOnDevice(FeatureType type)
        {
            if (_impl == null)
            {
                return false;
            }
            return _impl.IsFeatureAvailableOnDevice(type);
        }

        public override int SendAudioMetadata(byte[] metadata, ulong length)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendAudioMetadata(metadata, length);
        }

        public override int JoinChannelEx(string token, RtcConnection connection, ChannelMediaOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.JoinChannelEx(token, connection, options);
        }

        public override int LeaveChannelEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.LeaveChannelEx(connection);
        }

        public override int LeaveChannelEx(RtcConnection connection, LeaveChannelOptions options)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.LeaveChannelEx(connection, options);
        }

        public override int UpdateChannelMediaOptionsEx(ChannelMediaOptions options, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateChannelMediaOptionsEx(options, connection);
        }

        public override int SetVideoEncoderConfigurationEx(VideoEncoderConfiguration config, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetVideoEncoderConfigurationEx(config, connection);
        }

        public override int SetupRemoteVideoEx(VideoCanvas canvas, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetupRemoteVideoEx(canvas, connection);
        }

        public override int MuteRemoteAudioStreamEx(uint uid, bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRemoteAudioStreamEx(uid, mute, connection);
        }

        public override int MuteRemoteVideoStreamEx(uint uid, bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRemoteVideoStreamEx(uid, mute, connection);
        }

        public override int SetRemoteVideoStreamTypeEx(uint uid, VIDEO_STREAM_TYPE streamType, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteVideoStreamTypeEx(uid, streamType, connection);
        }

        public override int MuteLocalAudioStreamEx(bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteLocalAudioStreamEx(mute, connection);
        }

        public override int MuteLocalVideoStreamEx(bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteLocalVideoStreamEx(mute, connection);
        }

        public override int MuteAllRemoteAudioStreamsEx(bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteAllRemoteAudioStreamsEx(mute, connection);
        }

        public override int MuteAllRemoteVideoStreamsEx(bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteAllRemoteVideoStreamsEx(mute, connection);
        }

        public override int SetSubscribeAudioBlocklistEx(uint[] uidList, int uidNumber, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeAudioBlocklistEx(uidList, uidNumber, connection);
        }

        public override int SetSubscribeAudioAllowlistEx(uint[] uidList, int uidNumber, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeAudioAllowlistEx(uidList, uidNumber, connection);
        }

        public override int SetSubscribeVideoBlocklistEx(uint[] uidList, int uidNumber, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeVideoBlocklistEx(uidList, uidNumber, connection);
        }

        public override int SetSubscribeVideoAllowlistEx(uint[] uidList, int uidNumber, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetSubscribeVideoAllowlistEx(uidList, uidNumber, connection);
        }

        public override int SetRemoteVideoSubscriptionOptionsEx(uint uid, VideoSubscriptionOptions options, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteVideoSubscriptionOptionsEx(uid, options, connection);
        }

        public override int SetRemoteVoicePositionEx(uint uid, double pan, double gain, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteVoicePositionEx(uid, pan, gain, connection);
        }

        public override int SetRemoteUserSpatialAudioParamsEx(uint uid, SpatialAudioParams @params, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteUserSpatialAudioParamsEx(uid, @params, connection);
        }

        public override int SetRemoteRenderModeEx(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteRenderModeEx(uid, renderMode, mirrorMode, connection);
        }

        public override int EnableLoopbackRecordingEx(RtcConnection connection, bool enabled, string deviceName = "")
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableLoopbackRecordingEx(connection, enabled, deviceName);
        }

        public override int AdjustRecordingSignalVolumeEx(int volume, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustRecordingSignalVolumeEx(volume, connection);
        }

        public override int MuteRecordingSignalEx(bool mute, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRecordingSignalEx(mute, connection);
        }

        public override int AdjustUserPlaybackSignalVolumeEx(uint uid, int volume, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AdjustUserPlaybackSignalVolumeEx(uid, volume, connection);
        }

        public override CONNECTION_STATE_TYPE GetConnectionStateEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED;
            }
            return _impl.GetConnectionStateEx(connection);
        }

        public override int EnableEncryptionEx(RtcConnection connection, bool enabled, EncryptionConfig config)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableEncryptionEx(connection, enabled, config);
        }

        public override int CreateDataStreamEx(ref int streamId, bool reliable, bool ordered, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.CreateDataStreamEx(ref streamId, reliable, ordered, connection);
        }

        public override int CreateDataStreamEx(ref int streamId, DataStreamConfig config, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.CreateDataStreamEx(ref streamId, config, connection);
        }

        public override int SendStreamMessageEx(int streamId, byte[] data, uint length, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendStreamMessageEx(streamId, data, length, connection);
        }

        public override int SendRdtMessageEx(uint uid, RdtStreamType type, string data, ulong length, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendRdtMessageEx(uid, type, data, length, connection);
        }

        public override int SendMediaControlMessageEx(uint uid, string data, ulong length, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendMediaControlMessageEx(uid, data, length, connection);
        }

        public override int AddVideoWatermarkEx(string watermarkUrl, WatermarkOptions options, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.AddVideoWatermarkEx(watermarkUrl, options, connection);
        }

        public override int ClearVideoWatermarkEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ClearVideoWatermarkEx(connection);
        }

        public override int SendCustomReportMessageEx(string id, string category, string @event, string label, int value, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendCustomReportMessageEx(id, category, @event, label, value, connection);
        }

        public override int EnableAudioVolumeIndicationEx(int interval, int smooth, bool reportVad, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableAudioVolumeIndicationEx(interval, smooth, reportVad, connection);
        }

        public override int StartRtmpStreamWithoutTranscodingEx(string url, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartRtmpStreamWithoutTranscodingEx(url, connection);
        }

        public override int StartRtmpStreamWithTranscodingEx(string url, LiveTranscoding transcoding, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartRtmpStreamWithTranscodingEx(url, transcoding, connection);
        }

        public override int UpdateRtmpTranscodingEx(LiveTranscoding transcoding, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateRtmpTranscodingEx(transcoding, connection);
        }

        public override int StopRtmpStreamEx(string url, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopRtmpStreamEx(url, connection);
        }

        public override int StartOrUpdateChannelMediaRelayEx(ChannelMediaRelayConfiguration configuration, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartOrUpdateChannelMediaRelayEx(configuration, connection);
        }

        public override int StopChannelMediaRelayEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StopChannelMediaRelayEx(connection);
        }

        public override int PauseAllChannelMediaRelayEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PauseAllChannelMediaRelayEx(connection);
        }

        public override int ResumeAllChannelMediaRelayEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ResumeAllChannelMediaRelayEx(connection);
        }

        public override int GetUserInfoByUserAccountEx(string userAccount, ref UserInfo userInfo, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetUserInfoByUserAccountEx(userAccount, ref userInfo, connection);
        }

        public override int GetUserInfoByUidEx(uint uid, ref UserInfo userInfo, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetUserInfoByUidEx(uid, ref userInfo, connection);
        }

        public override int EnableDualStreamModeEx(bool enabled, SimulcastStreamConfig streamConfig, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableDualStreamModeEx(enabled, streamConfig, connection);
        }

        public override int SetDualStreamModeEx(SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDualStreamModeEx(mode, streamConfig, connection);
        }

        public override int SetHighPriorityUserListEx(uint[] uidList, int uidNum, STREAM_FALLBACK_OPTIONS option, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetHighPriorityUserListEx(uidList, uidNum, option, connection);
        }

        public override int TakeSnapshotEx(RtcConnection connection, uint uid, string filePath)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.TakeSnapshotEx(connection, uid, filePath);
        }

        public override int EnableContentInspectEx(bool enabled, ContentInspectConfig config, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.EnableContentInspectEx(enabled, config, connection);
        }

        public override int StartMediaRenderingTracingEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.StartMediaRenderingTracingEx(connection);
        }

        public override int SetParametersEx(RtcConnection connection, string parameters)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetParametersEx(connection, parameters);
        }

        public override int GetCallIdEx(ref string callId, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.GetCallIdEx(ref callId, connection);
        }

        public override int SendAudioMetadataEx(RtcConnection connection, byte[] metadata, ulong length)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SendAudioMetadataEx(connection, metadata, length);
        }

        public override int RegisterFaceInfoObserver(IFaceInfoObserver observer)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RegisterFaceInfoObserver(observer);
        }

        public override int PushAudioFrame(AudioFrame frame, uint trackId = 0)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PushAudioFrame(frame, trackId);
        }

        public override int PullAudioFrame(AudioFrame frame)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PullAudioFrame(frame);
        }

        public override int SetExternalVideoSource(bool enabled, bool useTexture, EXTERNAL_VIDEO_SOURCE_TYPE sourceType, SenderOptions encodedVideoOption)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetExternalVideoSource(enabled, useTexture, sourceType, encodedVideoOption);
        }

        public override int SetExternalAudioSource(bool enabled, int sampleRate, int channels, bool localPlayback = false, bool publish = true)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetExternalAudioSource(enabled, sampleRate, channels, localPlayback, publish);
        }

        public override uint CreateCustomAudioTrack(AUDIO_TRACK_TYPE trackType, AudioTrackConfig config)
        {
            if (_impl == null)
            {
                return 0;
            }
            return _impl.CreateCustomAudioTrack(trackType, config);
        }

        public override int DestroyCustomAudioTrack(uint trackId)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.DestroyCustomAudioTrack(trackId);
        }

        public override int SetExternalAudioSink(bool enabled, int sampleRate, int channels)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetExternalAudioSink(enabled, sampleRate, channels);
        }

        public override int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId = 0)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PushVideoFrame(frame, videoTrackId);
        }

        public override int PushEncodedVideoImage(byte[] imageBuffer, ulong length, EncodedVideoFrameInfo videoEncodedFrameInfo, uint videoTrackId = 0)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.PushEncodedVideoImage(imageBuffer, length, videoEncodedFrameInfo, videoTrackId);
        }

    }
}