#region Generated by `terra/node/src/rtc/middle/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

#define AGORA_RTC
#define AGORA_RTM
using System;
using view_t = System.UInt64;

namespace Agora.Rtc
{
    public partial class LocalSpatialAudioEngine : ILocalSpatialAudioEngine
    {

        public override int Initialize()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.Initialize();
        }

        public override int UpdateRemotePosition(uint uid, RemoteVoicePositionInfo posInfo)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateRemotePosition(uid, posInfo);
        }

        public override int UpdateRemotePositionEx(uint uid, RemoteVoicePositionInfo posInfo, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateRemotePositionEx(uid, posInfo, connection);
        }

        public override int RemoveRemotePosition(uint uid)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RemoveRemotePosition(uid);
        }

        public override int RemoveRemotePositionEx(uint uid, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.RemoveRemotePositionEx(uid, connection);
        }

        public override int ClearRemotePositionsEx(RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ClearRemotePositionsEx(connection);
        }

        public override int UpdateSelfPositionEx(float[] position, float[] axisForward, float[] axisRight, float[] axisUp, RtcConnection connection)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateSelfPositionEx(position, axisForward, axisRight, axisUp, connection);
        }

        public override int SetMaxAudioRecvCount(int maxCount)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetMaxAudioRecvCount(maxCount);
        }

        public override int SetAudioRecvRange(float range)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetAudioRecvRange(range);
        }

        public override int SetDistanceUnit(float unit)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetDistanceUnit(unit);
        }

        public override int UpdateSelfPosition(float[] position, float[] axisForward, float[] axisRight, float[] axisUp)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdateSelfPosition(position, axisForward, axisRight, axisUp);
        }

        public override int UpdatePlayerPositionInfo(int playerId, RemoteVoicePositionInfo positionInfo)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.UpdatePlayerPositionInfo(playerId, positionInfo);
        }

        public override int SetParameters(string @params)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetParameters(@params);
        }

        public override int MuteLocalAudioStream(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteLocalAudioStream(mute);
        }

        public override int MuteAllRemoteAudioStreams(bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteAllRemoteAudioStreams(mute);
        }

        public override int MuteRemoteAudioStream(uint uid, bool mute)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.MuteRemoteAudioStream(uid, mute);
        }

        public override int SetRemoteAudioAttenuation(uint uid, double attenuation, bool forceSet)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetRemoteAudioAttenuation(uid, attenuation, forceSet);
        }

        public override int SetZones(SpatialAudioZone[] zones, uint zoneCount)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetZones(zones, zoneCount);
        }

        public override int SetPlayerAttenuation(int playerId, double attenuation, bool forceSet)
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.SetPlayerAttenuation(playerId, attenuation, forceSet);
        }

        public override int ClearRemotePositions()
        {
            if (_impl == null)
            {
                return ErrorCode;
            }
            return _impl.ClearRemotePositions();
        }

    }
}