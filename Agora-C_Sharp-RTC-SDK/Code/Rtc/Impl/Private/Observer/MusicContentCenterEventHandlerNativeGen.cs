#region Generated by `terra/node/src/rtc/impl/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

#define AGORA_RTC
#define AGORA_RTM
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
using AOT;
#endif

namespace Agora.Rtc
{
    internal static partial class MusicContentCenterEventHandlerNative
    {

        internal static void OnEventGen(ref IrisRtcCEventParam eventParam, LitJson.JsonData jsonData, string @event)
        {
            switch (@event)
            {
                case AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONMUSICCHARTSRESULT_fb18135:
                    {
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
CallbackObject._CallbackQueue.EnQueue(() => {
#endif
                        if (EventHandler == null) return;
                        EventHandler.OnMusicChartsResult(
                        (string)AgoraJson.GetData<string>(jsonData, "requestId"),
                        (MusicChartInfo[])AgoraJson.JsonToStructArray<MusicChartInfo>(jsonData, "result"),
                        (MusicContentCenterStateReason)AgoraJson.GetData<int>(jsonData, "reason")
                        );
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
});
#endif
                        break;
                    }
                case AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONMUSICCOLLECTIONRESULT_c30c2e6:
                    {
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
CallbackObject._CallbackQueue.EnQueue(() => {
#endif
                        if (EventHandler == null) return;
                        EventHandler.OnMusicCollectionResult(
                        (string)AgoraJson.GetData<string>(jsonData, "requestId"),
                        (MusicCollection)AgoraJson.JsonToStruct<MusicCollection>(jsonData, "result"),
                        (MusicContentCenterStateReason)AgoraJson.GetData<int>(jsonData, "reason")
                        );
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
});
#endif
                        break;
                    }
                case AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONLYRICRESULT_9ad9c90:
                    {
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
CallbackObject._CallbackQueue.EnQueue(() => {
#endif
                        if (EventHandler == null) return;
                        EventHandler.OnLyricResult(
                        (string)AgoraJson.GetData<string>(jsonData, "requestId"),
                        (long)AgoraJson.GetData<long>(jsonData, "songCode"),
                        (string)AgoraJson.GetData<string>(jsonData, "lyricUrl"),
                        (MusicContentCenterStateReason)AgoraJson.GetData<int>(jsonData, "reason")
                        );
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
});
#endif
                        break;
                    }
                case AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONSONGSIMPLEINFORESULT_9ad9c90:
                    {
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
CallbackObject._CallbackQueue.EnQueue(() => {
#endif
                        if (EventHandler == null) return;
                        EventHandler.OnSongSimpleInfoResult(
                        (string)AgoraJson.GetData<string>(jsonData, "requestId"),
                        (long)AgoraJson.GetData<long>(jsonData, "songCode"),
                        (string)AgoraJson.GetData<string>(jsonData, "simpleInfo"),
                        (MusicContentCenterStateReason)AgoraJson.GetData<int>(jsonData, "reason")
                        );
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
});
#endif
                        break;
                    }
                case AgoraApiType.IMUSICCONTENTCENTEREVENTHANDLER_ONPRELOADEVENT_20170bc:
                    {
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
CallbackObject._CallbackQueue.EnQueue(() => {
#endif
                        if (EventHandler == null) return;
                        EventHandler.OnPreLoadEvent(
                        (string)AgoraJson.GetData<string>(jsonData, "requestId"),
                        (long)AgoraJson.GetData<long>(jsonData, "songCode"),
                        (int)AgoraJson.GetData<int>(jsonData, "percent"),
                        (string)AgoraJson.GetData<string>(jsonData, "lyricUrl"),
                        (PreloadState)AgoraJson.GetData<int>(jsonData, "state"),
                        (MusicContentCenterStateReason)AgoraJson.GetData<int>(jsonData, "reason")
                        );
#if UNITY_EDITOR_WIN || UNITY_EDITOR_OSX || UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_IOS || UNITY_ANDROID || UNITY_VISIONOS
});
#endif
                        break;
                    }
                default:
                    {
                        AgoraLog.LogWarning("unknow event: " + @event);
                        break;
                    }
            }
        }
    }
}