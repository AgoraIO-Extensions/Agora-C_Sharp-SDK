#region Generated by `terra/node/src/rtc/impl/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

#define AGORA_RTC
#define AGORA_RTM
using System;
using view_t = System.UInt64;

namespace Agora.Rtc
{
    public partial class AudioDeviceManagerImpl
    {

        public int SetPlaybackDevice(string deviceId)
        {
            _param.Clear();
            _param.Add("deviceId", deviceId);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETPLAYBACKDEVICE_4ad5f6e,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetPlaybackDevice(ref string deviceId)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETPLAYBACKDEVICE_73b9872,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int GetPlaybackDeviceInfo(ref string deviceId, ref string deviceName)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETPLAYBACKDEVICEINFO_5540658,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
                deviceName = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int GetPlaybackDeviceInfo(ref string deviceId, ref string deviceName, ref string deviceTypeName)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETPLAYBACKDEVICEINFO_ed3a96d,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
                deviceName = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
                deviceTypeName = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int SetPlaybackDeviceVolume(int volume)
        {
            _param.Clear();
            _param.Add("volume", volume);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETPLAYBACKDEVICEVOLUME_46f8ab7,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetPlaybackDeviceVolume(ref int volume)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETPLAYBACKDEVICEVOLUME_915cb25,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                volume = (int)AgoraJson.GetData<int>(_apiParam.Result, "result");
            }

            return result;
        }

        public int SetRecordingDevice(string deviceId)
        {
            _param.Clear();
            _param.Add("deviceId", deviceId);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETRECORDINGDEVICE_4ad5f6e,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetRecordingDevice(ref string deviceId)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETRECORDINGDEVICE_73b9872,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int GetRecordingDeviceInfo(ref string deviceId, ref string deviceName)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETRECORDINGDEVICEINFO_5540658,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
                deviceName = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int GetRecordingDeviceInfo(ref string deviceId, ref string deviceName, ref string deviceTypeName)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETRECORDINGDEVICEINFO_ed3a96d,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
                deviceName = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
                deviceTypeName = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int SetRecordingDeviceVolume(int volume)
        {
            _param.Clear();
            _param.Add("volume", volume);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETRECORDINGDEVICEVOLUME_46f8ab7,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetRecordingDeviceVolume(ref int volume)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETRECORDINGDEVICEVOLUME_915cb25,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                volume = (int)AgoraJson.GetData<int>(_apiParam.Result, "result");
            }

            return result;
        }

        public int SetLoopbackDevice(string deviceId)
        {
            _param.Clear();
            _param.Add("deviceId", deviceId);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETLOOPBACKDEVICE_4ad5f6e,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetLoopbackDevice(ref string deviceId)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETLOOPBACKDEVICE_73b9872,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceId = (string)AgoraJson.GetData<string>(_apiParam.Result, "result");
            }

            return result;
        }

        public int SetPlaybackDeviceMute(bool mute)
        {
            _param.Clear();
            _param.Add("mute", mute);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETPLAYBACKDEVICEMUTE_5039d15,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetPlaybackDeviceMute(ref bool mute)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETPLAYBACKDEVICEMUTE_d942327,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                mute = (bool)AgoraJson.GetData<bool>(_apiParam.Result, "result");
            }

            return result;
        }

        public int SetRecordingDeviceMute(bool mute)
        {
            _param.Clear();
            _param.Add("mute", mute);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_SETRECORDINGDEVICEMUTE_5039d15,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetRecordingDeviceMute(ref bool mute)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_GETRECORDINGDEVICEMUTE_d942327,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                mute = (bool)AgoraJson.GetData<bool>(_apiParam.Result, "result");
            }

            return result;
        }

        public int StartPlaybackDeviceTest(string testAudioFilePath)
        {
            _param.Clear();
            _param.Add("testAudioFilePath", testAudioFilePath);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_STARTPLAYBACKDEVICETEST_3a2037f,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int StopPlaybackDeviceTest()
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_STOPPLAYBACKDEVICETEST,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int StartRecordingDeviceTest(int indicationInterval)
        {
            _param.Clear();
            _param.Add("indicationInterval", indicationInterval);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_STARTRECORDINGDEVICETEST_46f8ab7,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int StopRecordingDeviceTest()
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_STOPRECORDINGDEVICETEST,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int StartAudioDeviceLoopbackTest(int indicationInterval)
        {
            _param.Clear();
            _param.Add("indicationInterval", indicationInterval);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_STARTAUDIODEVICELOOPBACKTEST_46f8ab7,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int StopAudioDeviceLoopbackTest()
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_STOPAUDIODEVICELOOPBACKTEST,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int FollowSystemPlaybackDevice(bool enable)
        {
            _param.Clear();
            _param.Add("enable", enable);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_FOLLOWSYSTEMPLAYBACKDEVICE_5039d15,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int FollowSystemRecordingDevice(bool enable)
        {
            _param.Clear();
            _param.Add("enable", enable);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_FOLLOWSYSTEMRECORDINGDEVICE_5039d15,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int FollowSystemLoopbackDevice(bool enable)
        {
            _param.Clear();
            _param.Add("enable", enable);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IAUDIODEVICEMANAGER_FOLLOWSYSTEMLOOPBACKDEVICE_5039d15,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

    }
}