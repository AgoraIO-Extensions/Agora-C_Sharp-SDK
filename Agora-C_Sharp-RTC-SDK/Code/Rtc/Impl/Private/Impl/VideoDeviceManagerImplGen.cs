#region Generated by `terra/node/src/rtc/impl/renderers.ts`. DO NOT MODIFY BY HAND.
#endregion

#define AGORA_RTC
#define AGORA_RTM
using System;
using view_t = System.UInt64;

namespace Agora.Rtc
{
    public partial class VideoDeviceManagerImpl
    {

        public int SetDevice(string deviceIdUTF8)
        {
            _param.Clear();
            _param.Add("deviceIdUTF8", deviceIdUTF8);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IVIDEODEVICEMANAGER_SETDEVICE_4ad5f6e,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetDevice(ref string deviceIdUTF8)
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IVIDEODEVICEMANAGER_GETDEVICE_73b9872,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                deviceIdUTF8 = (string)AgoraJson.GetData<string>(_apiParam.Result, "deviceIdUTF8");
            }

            return result;
        }

        public int NumberOfCapabilities(string deviceIdUTF8)
        {
            _param.Clear();
            _param.Add("deviceIdUTF8", deviceIdUTF8);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IVIDEODEVICEMANAGER_NUMBEROFCAPABILITIES_3a2037f,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int GetCapability(string deviceIdUTF8, uint deviceCapabilityNumber, ref VideoFormat capability)
        {
            _param.Clear();
            _param.Add("deviceIdUTF8", deviceIdUTF8);
            _param.Add("deviceCapabilityNumber", deviceCapabilityNumber);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IVIDEODEVICEMANAGER_GETCAPABILITY_ddeefdd,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");

            if (nRet == 0)
            {
                capability = (VideoFormat)AgoraJson.JsonToStruct<VideoFormat>(_apiParam.Result, "capability");
            }

            return result;
        }

        public int StartDeviceTest(IntPtr hwnd)
        {
            _param.Clear();
            _param.Add("hwnd", hwnd);

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IVIDEODEVICEMANAGER_STARTDEVICETEST_a55f55f,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

        public int StopDeviceTest()
        {
            _param.Clear();

            var json = AgoraJson.ToJson(_param);
            var nRet = AgoraRtcNative.CallIrisApiWithArgs(_irisApiEngine, AgoraApiType.IVIDEODEVICEMANAGER_STOPDEVICETEST,
                json, (UInt32)json.Length,
                IntPtr.Zero, 0,
                ref _apiParam);

            var result = nRet != 0 ? nRet : (int)AgoraJson.GetData<int>(_apiParam.Result, "result");


            return result;
        }

    }
}